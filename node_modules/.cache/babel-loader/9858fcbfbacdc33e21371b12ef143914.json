{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, mergeProps, getPropsData, filterEmpty, getListeners } from '../../_util/props-util';\n\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\n\nvar Select = {\n  name: 'Select',\n  mixins: [BaseMixin],\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.bool,\n    showArrow: PropTypes.bool,\n    open: PropTypes.bool,\n    value: PropTypes.any,\n    autoFocus: PropTypes.bool,\n    defaultOpen: PropTypes.bool,\n    defaultValue: PropTypes.any,\n    showSearch: PropTypes.bool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string,\n    // [Legacy] Deprecated. Use `searchValue` instead.\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.bool,\n    searchPlaceholder: PropTypes.any,\n    // [Legacy] Confuse with placeholder\n    disabled: PropTypes.bool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.bool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.oneOfType([PropTypes.any, PropTypes.func]),\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.bool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.oneOfType([PropTypes.any, PropTypes.object, PropTypes.bool]),\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.bool,\n    treeIcon: PropTypes.bool,\n    treeLine: PropTypes.bool,\n    treeDefaultExpandAll: PropTypes.bool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.bool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _$props = this.$props,\n        prefixAria = _$props.prefixAria,\n        defaultOpen = _$props.defaultOpen,\n        open = _$props.open;\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    this.ariaId = generateAriaId(prefixAria + '-list');\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [],\n      // Contains the value not in the tree\n      _selectorValueList: [],\n      // Used for multiple selector\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends({}, state, newState);\n  },\n  provide: function provide() {\n    return {\n      vcTreeSelect: {\n        onSelectorFocus: this.onSelectorFocus,\n        onSelectorBlur: this.onSelectorBlur,\n        onSelectorKeyDown: this.onComponentKeyDown,\n        onSelectorClear: this.onSelectorClear,\n        onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n        onTreeNodeSelect: this.onTreeNodeSelect,\n        onTreeNodeCheck: this.onTreeNodeCheck,\n        onPopupKeyDown: this.onComponentKeyDown,\n        onSearchInputChange: this.onSearchInputChange,\n        onSearchInputKeyDown: this.onSearchInputKeyDown\n      }\n    };\n  },\n  watch: _extends({}, getWatch(['treeData', 'defaultValue', 'value']), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    '$data._valueList': function $data_valueList() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    '$data._open': function $data_open(open) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        var prefixCls = _this2.$props.prefixCls;\n        var _$data = _this2.$data,\n            selectorValueList = _$data._selectorValueList,\n            valueEntities = _$data._valueEntities;\n\n        var isMultiple = _this2.isMultiple(); // Scroll to value position, only need sync on single mode\n\n\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n\n          var _popup$getTree = _this2.popup.getTree(),\n              domTreeNodes = _popup$getTree.domTreeNodes;\n\n          var _ref = valueEntities[value] || {},\n              key = _ref.key;\n\n          var treeNode = domTreeNodes[key];\n\n          if (treeNode) {\n            var domNode = treeNode.$el;\n            raf(function () {\n              var popupNode = _this2.popup.$el;\n              var triggerContainer = findPopupContainer(popupNode, prefixCls + '-dropdown');\n              var searchNode = _this2.popup.searchRef.current;\n\n              if (domNode && triggerContainer && searchNode) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: searchNode.offsetHeight\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      var _$props2 = _this3.$props,\n          autoFocus = _$props2.autoFocus,\n          disabled = _$props2.disabled;\n\n      if (autoFocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var h = this.$createElement;\n      var _prevState$_prevProps = prevState._prevProps,\n          prevProps = _prevState$_prevProps === undefined ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes = void 0;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(h, propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(h, parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = filterEmpty(this.$slots['default']);\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState._valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        } // Get key by value\n\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState._missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState._filteredTreeNodes = getFilterTree(this.$createElement, newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n      return newState;\n    },\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({\n        _focused: true\n      });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({\n        _focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n      if (disabled) return;\n      this.triggerChange([], []);\n\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n      var _$data2 = this.$data,\n          valueList = _$data2._valueList,\n          missValueList = _$data2._missValueList,\n          valueEntities = _$data2._valueEntities;\n      var _$props3 = this.$props,\n          treeCheckable = _$props3.treeCheckable,\n          treeCheckStrictly = _$props3.treeCheckStrictly,\n          treeNodeLabelProp = _$props3.treeNodeLabelProp,\n          disabled = _$props3.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n              pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue = void 0;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _$data3 = this.$data,\n          missValueList = _$data3._missValueList,\n          valueEntities = _$data3._valueEntities,\n          keyEntities = _$data3._keyEntities,\n          searchValue = _$data3._searchValue;\n      var _$props4 = this.$props,\n          disabled = _$props4.disabled,\n          inputValue = _$props4.inputValue,\n          treeNodeLabelProp = _$props4.treeNodeLabelProp,\n          multiple = _$props4.multiple,\n          treeCheckable = _$props4.treeCheckable,\n          treeCheckStrictly = _$props4.treeCheckStrictly,\n          autoClearSearchValue = _$props4.autoClearSearchValue;\n      var label = node.$props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue = void 0;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (searchValue && searchValue.length) {\n          this.__emit('update:searchValue', '');\n\n          this.__emit('search', '');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _extends({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _$data4 = this.$data,\n          valueList = _$data4._valueList,\n          valueEntities = _$data4._valueEntities;\n      var _$props5 = this.$props,\n          treeCheckable = _$props5.treeCheckable,\n          multiple = _$props5.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n      var newValueList = void 0;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _$data5 = this.$data,\n          searchValue = _$data5._searchValue,\n          keyEntities = _$data5._keyEntities,\n          valueEntities = _$data5._valueEntities,\n          valueList = _$data5._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList = void 0;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n                value = _getPropsData.value;\n\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n    // ==================== Trigger =====================\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _$props6 = this.$props,\n          multiple = _$props6.multiple,\n          treeCheckable = _$props6.treeCheckable;\n      var _searchValue = this.$data._searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _$data6 = this.$data,\n          treeNodes = _$data6._treeNodes,\n          valueEntities = _$data6._valueEntities;\n      var _$props7 = this.$props,\n          filterTreeNode = _$props7.filterTreeNode,\n          treeNodeFilterProp = _$props7.treeNodeFilterProp;\n\n      this.__emit('update:searchValue', value);\n\n      this.__emit('search', value);\n\n      var isSet = false;\n\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        this.setState({\n          _filteredTreeNodes: getFilterTree(this.$createElement, treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _$data7 = this.$data,\n          searchValue = _$data7._searchValue,\n          valueList = _$data7._valueList;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n\n      raf(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n\n      return needSync;\n    },\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n\n      if (dropdownVisibleChange && dropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      this.setUncontrolledState({\n        _open: open\n      });\n    },\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _$props8 = this.$props,\n          multiple = _$props8.multiple,\n          treeCheckable = _$props8.treeCheckable;\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this; // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n\n\n      raf(function () {\n        raf(_this5.forcePopupAlign);\n      });\n    },\n\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _$data8 = this.$data,\n          valueEntities = _$data8._valueEntities,\n          searchValue = _$data8._searchValue,\n          prevSelectorValueList = _$data8._selectorValueList;\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n          treeCheckable = props.treeCheckable,\n          treeCheckStrictly = props.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n              value = _ref16.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (getListeners(this).change) {\n        var connectValueList = void 0; // Get value by mode\n\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue = void 0;\n\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n                value = _ref17.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n                value = _ref18.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n  // ===================== Render =====================\n  render: function render() {\n    var h = arguments[0];\n    var _$data9 = this.$data,\n        valueList = _$data9._valueList,\n        missValueList = _$data9._missValueList,\n        selectorValueList = _$data9._selectorValueList,\n        searchHalfCheckedKeys = _$data9._searchHalfCheckedKeys,\n        valueEntities = _$data9._valueEntities,\n        keyEntities = _$data9._keyEntities,\n        searchValue = _$data9._searchValue,\n        open = _$data9._open,\n        focused = _$data9._focused,\n        treeNodes = _$data9._treeNodes,\n        filteredTreeNodes = _$data9._filteredTreeNodes;\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n        treeExpandedKeys = props.treeExpandedKeys;\n    var isMultiple = this.isMultiple();\n    var passProps = {\n      props: _extends({}, props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        dropdownPrefixCls: prefixCls + '-dropdown',\n        ariaId: this.ariaId\n      }),\n      on: _extends({}, getListeners(this), {\n        choiceAnimationLeave: this.onChoiceAnimationLeave\n      }),\n      scopedSlots: this.$scopedSlots\n    };\n    var popupProps = mergeProps(passProps, {\n      props: {\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes,\n        // Tree expanded control\n        treeExpandedKeys: treeExpandedKeys,\n        __propsSymbol__: Symbol()\n      },\n      on: {\n        treeExpanded: this.delayForcePopupAlign\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.setPopupRef\n      }]\n    });\n    var Popup = isMultiple ? MultiplePopup : SinglePopup;\n    var $popup = h(Popup, popupProps);\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n    var $selector = h(Selector, _mergeJSXProps([passProps, {\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectorRef\n      }]\n    }]));\n    var selectTriggerProps = mergeProps(passProps, {\n      props: {\n        popupElement: $popup,\n        dropdownVisibleChange: this.onDropdownVisibleChange\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectTriggerRef\n      }]\n    });\n    return h(SelectTrigger, selectTriggerProps, [$selector]);\n  }\n};\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.name = 'TreeSelect';\nexport default Select;","map":{"version":3,"names":["_mergeJSXProps","_toConsumableArray","_extends","shallowEqual","raf","scrollIntoView","warning","PropTypes","KeyCode","SelectTrigger","SingleSelector","MultipleSelector","SinglePopup","MultiplePopup","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","BaseMixin","createRef","generateAriaId","formatInternalValue","formatSelectorValue","parseSimpleTreeData","convertDataToTree","convertTreeToEntities","conductCheck","getHalfCheckedKeys","flatToHierarchy","isPosRelated","isLabelInValue","_isLabelInValue","getFilterTree","cleanEntity","findPopupContainer","SelectNode","initDefaultProps","getOptionProps","mergeProps","getPropsData","filterEmpty","getListeners","getWatch","keys","arguments","length","undefined","watch","forEach","k","needSyncKeys","Select","name","mixins","props","prefixCls","string","prefixAria","multiple","bool","showArrow","open","value","any","autoFocus","defaultOpen","defaultValue","showSearch","placeholder","inputValue","searchValue","autoClearSearchValue","searchPlaceholder","disabled","children","labelInValue","maxTagCount","number","maxTagPlaceholder","oneOfType","func","maxTagTextLength","showCheckedStrategy","oneOf","dropdownClassName","dropdownStyle","object","dropdownVisibleChange","dropdownMatchSelectWidth","treeData","array","treeDataSimpleMode","treeNodeFilterProp","treeNodeLabelProp","treeCheckable","treeCheckStrictly","treeIcon","treeLine","treeDefaultExpandAll","treeDefaultExpandedKeys","treeExpandedKeys","loadData","filterTreeNode","notFoundContent","getPopupContainer","allowClear","transitionName","animation","choiceTransitionName","inputIcon","clearIcon","removeIcon","switcherIcon","__propsSymbol__","data","$props","_$props","selectorRef","selectTriggerRef","ariaId","state","_open","_valueList","_searchHalfCheckedKeys","_missValueList","_selectorValueList","_valueEntities","_posEntities","Map","_keyEntities","_searchValue","_prevProps","_init","_focused","_treeNodes","_filteredTreeNodes","newState","getDerivedState","provide","vcTreeSelect","onSelectorFocus","onSelectorBlur","onSelectorKeyDown","onComponentKeyDown","onSelectorClear","onMultipleSelectorRemove","onTreeNodeSelect","onTreeNodeCheck","onPopupKeyDown","onSearchInputChange","onSearchInputKeyDown","$data","setState","$data_valueList","_this","$nextTick","forcePopupAlign","$data_open","_this2","setTimeout","_$data","selectorValueList","valueEntities","isMultiple","popup","_popup$getTree","getTree","domTreeNodes","_ref","key","treeNode","domNode","$el","popupNode","triggerContainer","searchNode","searchRef","current","onlyScrollIfNeeded","offsetTop","offsetHeight","mounted","_this3","_$props2","focus","methods","nextProps","prevState","h","$createElement","_prevState$_prevProps","prevProps","self","processState","propName","updater","valueRefresh","propValue","treeNodes","treeDataChanged","treeDataModeChanged","prevValue","prev","simpleMapper","id","pId","rootPId","$slots","entitiesMap","posEntities","keyEntities","missValueList","filteredValueList","keyList","latestValueList","concat","valueLabels","wrapperValue","label","entity","push","_conductCheck","checkedKeys","map","val","get","wrappedValue","upperSearchValue","String","toUpperCase","filterTreeNodeFn","_","node","nodeValue","indexOf","event","keyCode","ENTER","DOWN","setOpenState","ESC","UP","LEFT","RIGHT","stopPropagation","onDeselect","nodeEventInfo","__emit","triggerChange","isSearchValueControlled","setUncontrolledState","removeValue","_$data2","valueList","_$props3","triggerEntity","newValueList","filter","_ref2","pos","_ref3","triggerNode","extraInfo","triggerValue","deselectInfo","filteredEntityList","_ref4","checked","checkedNodes","_ref5","checkedNodesPositions","_ref6","allCheckedNodes","_ref7","selected","selectedNodes","_ref8","newMissValueList","_ref9","onValueTrigger","isAdd","nodeList","nodeExtraInfo","_$data3","_$props4","_ref10","_$data4","_$props5","selectedValue","_ref11","_ref12","_ref13","_$data5","checkedNodeList","oriKeyList","_ref14","_ref15","Array","from","Set","_getPropsData","eventKey","onDropdownVisibleChange","_$props6","target","_$data6","_$props7","isSet","_$data7","BACKSPACE","lastValue","onChoiceAnimationLeave","_this4","setPopupRef","needSync","Object","slice","byTrigger","documentClickClose","_$props8","$trigger","delayForcePopupAlign","_this5","_$data8","prevSelectorValueList","extra","preValue","_ref16","change","connectValueList","labelList","returnValue","_ref17","_ref18","blur","render","_$data9","searchHalfCheckedKeys","focused","filteredTreeNodes","passProps","dropdownPrefixCls","on","choiceAnimationLeave","scopedSlots","$scopedSlots","popupProps","Symbol","treeExpanded","directives","Popup","$popup","Selector","$selector","selectTriggerProps","popupElement","TreeNode"],"sources":["/Users/andreidev/domains/hakaton_cskz_front/node_modules/ant-design-vue/es/vc-tree-select/src/Select.js"],"sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\n\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\n\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, mergeProps, getPropsData, filterEmpty, getListeners } from '../../_util/props-util';\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\nvar Select = {\n  name: 'Select',\n  mixins: [BaseMixin],\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.bool,\n    showArrow: PropTypes.bool,\n    open: PropTypes.bool,\n    value: PropTypes.any,\n\n    autoFocus: PropTypes.bool,\n\n    defaultOpen: PropTypes.bool,\n    defaultValue: PropTypes.any,\n\n    showSearch: PropTypes.bool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string, // [Legacy] Deprecated. Use `searchValue` instead.\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.bool,\n    searchPlaceholder: PropTypes.any, // [Legacy] Confuse with placeholder\n    disabled: PropTypes.bool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.bool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.oneOfType([PropTypes.any, PropTypes.func]),\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.bool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.oneOfType([PropTypes.any, PropTypes.object, PropTypes.bool]),\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.bool,\n    treeIcon: PropTypes.bool,\n    treeLine: PropTypes.bool,\n    treeDefaultExpandAll: PropTypes.bool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.bool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _$props = this.$props,\n        prefixAria = _$props.prefixAria,\n        defaultOpen = _$props.defaultOpen,\n        open = _$props.open;\n\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef();\n\n    // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n    this.ariaId = generateAriaId(prefixAria + '-list');\n\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [], // Contains the value not in the tree\n      _selectorValueList: [], // Used for multiple selector\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends({}, state, newState);\n  },\n  provide: function provide() {\n    return {\n      vcTreeSelect: {\n        onSelectorFocus: this.onSelectorFocus,\n        onSelectorBlur: this.onSelectorBlur,\n        onSelectorKeyDown: this.onComponentKeyDown,\n        onSelectorClear: this.onSelectorClear,\n        onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n\n        onTreeNodeSelect: this.onTreeNodeSelect,\n        onTreeNodeCheck: this.onTreeNodeCheck,\n        onPopupKeyDown: this.onComponentKeyDown,\n\n        onSearchInputChange: this.onSearchInputChange,\n        onSearchInputKeyDown: this.onSearchInputKeyDown\n      }\n    };\n  },\n\n  watch: _extends({}, getWatch(['treeData', 'defaultValue', 'value']), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    '$data._valueList': function $data_valueList() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    '$data._open': function $data_open(open) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        var prefixCls = _this2.$props.prefixCls;\n        var _$data = _this2.$data,\n            selectorValueList = _$data._selectorValueList,\n            valueEntities = _$data._valueEntities;\n\n        var isMultiple = _this2.isMultiple();\n\n        // Scroll to value position, only need sync on single mode\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n\n          var _popup$getTree = _this2.popup.getTree(),\n              domTreeNodes = _popup$getTree.domTreeNodes;\n\n          var _ref = valueEntities[value] || {},\n              key = _ref.key;\n\n          var treeNode = domTreeNodes[key];\n\n          if (treeNode) {\n            var domNode = treeNode.$el;\n            raf(function () {\n              var popupNode = _this2.popup.$el;\n              var triggerContainer = findPopupContainer(popupNode, prefixCls + '-dropdown');\n              var searchNode = _this2.popup.searchRef.current;\n\n              if (domNode && triggerContainer && searchNode) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: searchNode.offsetHeight\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      var _$props2 = _this3.$props,\n          autoFocus = _$props2.autoFocus,\n          disabled = _$props2.disabled;\n\n      if (autoFocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n\n\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var h = this.$createElement;\n      var _prevState$_prevProps = prevState._prevProps,\n          prevProps = _prevState$_prevProps === undefined ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this;\n      // Process the state when props updated\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n        return false;\n      }\n\n      var valueRefresh = false;\n\n      // Open\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      });\n\n      // Tree Nodes\n      var treeNodes = void 0;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(h, propValue);\n        treeDataChanged = true;\n      });\n\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n\n        var prev = !prevValue || prevValue === true ? {} : prevValue;\n\n        // Shallow equal to avoid dynamic prop object\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      });\n\n      // Parse by `treeDataSimpleMode`\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n        treeNodes = convertDataToTree(h, parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      }\n\n      // If `treeData` not provide, use children TreeNodes\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = filterEmpty(this.$slots['default']);\n      }\n\n      // Convert `treeData` to entities\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n\n        valueRefresh = true;\n      }\n\n      // Value List\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      });\n\n      // Selector Value List\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = [];\n\n        // Get latest value list\n        var latestValueList = newState._valueList;\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        }\n\n        // Get key by value\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          }\n\n          // If not match, it may caused by ajax load. We need keep this\n          missValueList.push(wrapperValue);\n        });\n\n        // We need calculate the value when tree is checked tree\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n              checkedKeys = _conductCheck.checkedKeys;\n\n          // Format value list again for internal usage\n\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        }\n\n        // Fill the missValueList, we still need display in the selector\n        newState._missValueList = missValueList;\n\n        // Calculate the value list for `Selector` usage\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      }\n\n      // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      });\n\n      // Search value\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      });\n\n      // Do the search logic\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState._filteredTreeNodes = getFilterTree(this.$createElement, newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      }\n\n      // We should re-calculate the halfCheckedKeys when in search mode\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      }\n\n      // Checked Strategy\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n\n      return newState;\n    },\n\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({ _focused: true });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({ _focused: false });\n\n      // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n\n\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n\n      if (disabled) return;\n\n      this.triggerChange([], []);\n\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n\n      var _$data2 = this.$data,\n          valueList = _$data2._valueList,\n          missValueList = _$data2._missValueList,\n          valueEntities = _$data2._valueEntities;\n      var _$props3 = this.$props,\n          treeCheckable = _$props3.treeCheckable,\n          treeCheckStrictly = _$props3.treeCheckStrictly,\n          treeNodeLabelProp = _$props3.treeNodeLabelProp,\n          disabled = _$props3.disabled;\n\n      if (disabled) return;\n\n      // Find trigger entity\n      var triggerEntity = valueEntities[removeValue];\n\n      // Clean up value\n      var newValueList = valueList;\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      };\n\n      // [Legacy] Little hack on this to make same action as `onCheck` event.\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n              pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      }\n\n      // Some value user pass prop is not in the tree, we also need clean it\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue = void 0;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n\n\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _$data3 = this.$data,\n          missValueList = _$data3._missValueList,\n          valueEntities = _$data3._valueEntities,\n          keyEntities = _$data3._keyEntities,\n          searchValue = _$data3._searchValue;\n      var _$props4 = this.$props,\n          disabled = _$props4.disabled,\n          inputValue = _$props4.inputValue,\n          treeNodeLabelProp = _$props4.treeNodeLabelProp,\n          multiple = _$props4.multiple,\n          treeCheckable = _$props4.treeCheckable,\n          treeCheckStrictly = _$props4.treeCheckStrictly,\n          autoClearSearchValue = _$props4.autoClearSearchValue;\n\n      var label = node.$props[treeNodeLabelProp];\n\n      if (disabled) return;\n\n      // Wrap the return value for user\n      var wrappedValue = void 0;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      }\n\n      // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      }\n\n      // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      });\n\n      // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      }\n\n      // Clean up `searchValue` when this prop is set\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        }\n\n        // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n        if (searchValue && searchValue.length) {\n          this.__emit('update:searchValue', '');\n          this.__emit('search', '');\n        }\n      }\n\n      // [Legacy] Provide extra info\n      var extraInfo = _extends({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _$data4 = this.$data,\n          valueList = _$data4._valueList,\n          valueEntities = _$data4._valueEntities;\n      var _$props5 = this.$props,\n          treeCheckable = _$props5.treeCheckable,\n          multiple = _$props5.multiple;\n\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n\n\n      var newValueList = void 0;\n\n      if (!multiple) {\n        newValueList = [{ value: selectedValue }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n        if (isAdd) {\n          newValueList.push({ value: selectedValue });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, { selected: isAdd });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _$data5 = this.$data,\n          searchValue = _$data5._searchValue,\n          keyEntities = _$data5._keyEntities,\n          valueEntities = _$data5._valueEntities,\n          valueList = _$data5._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n\n      var isAdd = nodeEventInfo.checked;\n\n      var extraInfo = {\n        checked: isAdd\n      };\n\n      var checkedNodeList = checkedNodes;\n\n      // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n\n        var keyList = void 0;\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n                value = _getPropsData.value;\n\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        });\n\n        // Let's follow as not `treeCheckStrictly` format\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n\n\n    // ==================== Trigger =====================\n\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _$props6 = this.$props,\n          multiple = _$props6.multiple,\n          treeCheckable = _$props6.treeCheckable;\n      var _searchValue = this.$data._searchValue;\n\n      // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _$data6 = this.$data,\n          treeNodes = _$data6._treeNodes,\n          valueEntities = _$data6._valueEntities;\n      var _$props7 = this.$props,\n          filterTreeNode = _$props7.filterTreeNode,\n          treeNodeFilterProp = _$props7.treeNodeFilterProp;\n\n      this.__emit('update:searchValue', value);\n      this.__emit('search', value);\n\n      var isSet = false;\n\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        this.setState({\n          _filteredTreeNodes: getFilterTree(this.$createElement, treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _$data7 = this.$data,\n          searchValue = _$data7._searchValue,\n          valueList = _$data7._valueList;\n      var keyCode = event.keyCode;\n\n\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n\n      raf(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n\n      return needSync;\n    },\n\n\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n\n\n      if (dropdownVisibleChange && dropdownVisibleChange(open, { documentClickClose: !open && byTrigger }) === false) {\n        return;\n      }\n\n      this.setUncontrolledState({ _open: open });\n    },\n\n\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _$props8 = this.$props,\n          multiple = _$props8.multiple,\n          treeCheckable = _$props8.treeCheckable;\n\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n\n\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this;\n\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this5.forcePopupAlign);\n      });\n    },\n\n\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _$data8 = this.$data,\n          valueEntities = _$data8._valueEntities,\n          searchValue = _$data8._searchValue,\n          prevSelectorValueList = _$data8._selectorValueList;\n\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n          treeCheckable = props.treeCheckable,\n          treeCheckStrictly = props.treeCheckStrictly;\n\n      if (disabled) return;\n\n      // Trigger\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n              value = _ref16.value;\n          return { label: label, value: value };\n        })\n      }, extraInfo);\n\n      // Format value by `treeCheckStrictly`\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        this.setState(newState);\n      }\n\n      // Only do the logic when `onChange` function provided\n      if (getListeners(this).change) {\n        var connectValueList = void 0;\n\n        // Get value by mode\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue = void 0;\n\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n                value = _ref17.value;\n            return { label: label, value: value };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n                value = _ref18.value;\n\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n\n  // ===================== Render =====================\n\n  render: function render() {\n    var h = arguments[0];\n    var _$data9 = this.$data,\n        valueList = _$data9._valueList,\n        missValueList = _$data9._missValueList,\n        selectorValueList = _$data9._selectorValueList,\n        searchHalfCheckedKeys = _$data9._searchHalfCheckedKeys,\n        valueEntities = _$data9._valueEntities,\n        keyEntities = _$data9._keyEntities,\n        searchValue = _$data9._searchValue,\n        open = _$data9._open,\n        focused = _$data9._focused,\n        treeNodes = _$data9._treeNodes,\n        filteredTreeNodes = _$data9._filteredTreeNodes;\n\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n        treeExpandedKeys = props.treeExpandedKeys;\n\n    var isMultiple = this.isMultiple();\n\n    var passProps = {\n      props: _extends({}, props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(), // Perf save\n        open: open,\n        focused: focused,\n        dropdownPrefixCls: prefixCls + '-dropdown',\n        ariaId: this.ariaId\n      }),\n      on: _extends({}, getListeners(this), {\n        choiceAnimationLeave: this.onChoiceAnimationLeave\n      }),\n      scopedSlots: this.$scopedSlots\n    };\n    var popupProps = mergeProps(passProps, {\n      props: {\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes,\n        // Tree expanded control\n        treeExpandedKeys: treeExpandedKeys,\n        __propsSymbol__: Symbol()\n      },\n      on: {\n        treeExpanded: this.delayForcePopupAlign\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.setPopupRef\n      }]\n    });\n\n    var Popup = isMultiple ? MultiplePopup : SinglePopup;\n    var $popup = h(Popup, popupProps);\n\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n    var $selector = h(Selector, _mergeJSXProps([passProps, {\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectorRef\n      }]\n    }]));\n    var selectTriggerProps = mergeProps(passProps, {\n      props: {\n        popupElement: $popup,\n        dropdownVisibleChange: this.onDropdownVisibleChange\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectTriggerRef\n      }]\n    });\n    return h(\n      SelectTrigger,\n      selectTriggerProps,\n      [$selector]\n    );\n  }\n};\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD;\n\n// Let warning show correct component name\nSelect.name = 'TreeSelect';\n\nexport default Select;"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,cAAP,MAA2B,kCAA3B;AACA,OAAOC,kBAAP,MAA+B,yCAA/B;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AAEA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,UAAhC,QAAkD,cAAlD;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,mBAApC,EAAyDC,mBAAzD,EAA8EC,mBAA9E,EAAmGC,iBAAnG,EAAsHC,qBAAtH,EAA6IC,YAA7I,EAA2JC,kBAA3J,EAA+KC,eAA/K,EAAgMC,YAAhM,EAA8MC,cAAc,IAAIC,eAAhO,EAAiPC,aAAjP,EAAgQC,WAAhQ,EAA6QC,kBAA7Q,QAAuS,QAAvS;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,UAA3C,EAAuDC,YAAvD,EAAqEC,WAArE,EAAkFC,YAAlF,QAAsG,wBAAtG;;AACA,SAASC,QAAT,GAAoB;EAClB,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;EAEA,IAAIG,KAAK,GAAG,EAAZ;EACAJ,IAAI,CAACK,OAAL,CAAa,UAAUC,CAAV,EAAa;IACxBF,KAAK,CAACE,CAAD,CAAL,GAAW,YAAY;MACrB,KAAKC,YAAL,CAAkBD,CAAlB,IAAuB,IAAvB;IACD,CAFD;EAGD,CAJD;EAKA,OAAOF,KAAP;AACD;;AACD,IAAII,MAAM,GAAG;EACXC,IAAI,EAAE,QADK;EAEXC,MAAM,EAAE,CAACnC,SAAD,CAFG;EAGXoC,KAAK,EAAElB,gBAAgB,CAAC;IACtBmB,SAAS,EAAE/C,SAAS,CAACgD,MADC;IAEtBC,UAAU,EAAEjD,SAAS,CAACgD,MAFA;IAGtBE,QAAQ,EAAElD,SAAS,CAACmD,IAHE;IAItBC,SAAS,EAAEpD,SAAS,CAACmD,IAJC;IAKtBE,IAAI,EAAErD,SAAS,CAACmD,IALM;IAMtBG,KAAK,EAAEtD,SAAS,CAACuD,GANK;IAQtBC,SAAS,EAAExD,SAAS,CAACmD,IARC;IAUtBM,WAAW,EAAEzD,SAAS,CAACmD,IAVD;IAWtBO,YAAY,EAAE1D,SAAS,CAACuD,GAXF;IAatBI,UAAU,EAAE3D,SAAS,CAACmD,IAbA;IActBS,WAAW,EAAE5D,SAAS,CAACuD,GAdD;IAetBM,UAAU,EAAE7D,SAAS,CAACgD,MAfA;IAeQ;IAC9Bc,WAAW,EAAE9D,SAAS,CAACgD,MAhBD;IAiBtBe,oBAAoB,EAAE/D,SAAS,CAACmD,IAjBV;IAkBtBa,iBAAiB,EAAEhE,SAAS,CAACuD,GAlBP;IAkBY;IAClCU,QAAQ,EAAEjE,SAAS,CAACmD,IAnBE;IAoBtBe,QAAQ,EAAElE,SAAS,CAACuD,GApBE;IAqBtBY,YAAY,EAAEnE,SAAS,CAACmD,IArBF;IAsBtBiB,WAAW,EAAEpE,SAAS,CAACqE,MAtBD;IAuBtBC,iBAAiB,EAAEtE,SAAS,CAACuE,SAAV,CAAoB,CAACvE,SAAS,CAACuD,GAAX,EAAgBvD,SAAS,CAACwE,IAA1B,CAApB,CAvBG;IAwBtBC,gBAAgB,EAAEzE,SAAS,CAACqE,MAxBN;IAyBtBK,mBAAmB,EAAE1E,SAAS,CAAC2E,KAAV,CAAgB,CAACpE,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,CAAhB,CAzBC;IA0BtBmE,iBAAiB,EAAE5E,SAAS,CAACgD,MA1BP;IA2BtB6B,aAAa,EAAE7E,SAAS,CAAC8E,MA3BH;IA4BtBC,qBAAqB,EAAE/E,SAAS,CAACwE,IA5BX;IA6BtBQ,wBAAwB,EAAEhF,SAAS,CAACmD,IA7Bd;IA8BtB8B,QAAQ,EAAEjF,SAAS,CAACkF,KA9BE;IA+BtBC,kBAAkB,EAAEnF,SAAS,CAACuE,SAAV,CAAoB,CAACvE,SAAS,CAACmD,IAAX,EAAiBnD,SAAS,CAAC8E,MAA3B,CAApB,CA/BE;IAgCtBM,kBAAkB,EAAEpF,SAAS,CAACgD,MAhCR;IAiCtBqC,iBAAiB,EAAErF,SAAS,CAACgD,MAjCP;IAkCtBsC,aAAa,EAAEtF,SAAS,CAACuE,SAAV,CAAoB,CAACvE,SAAS,CAACuD,GAAX,EAAgBvD,SAAS,CAAC8E,MAA1B,EAAkC9E,SAAS,CAACmD,IAA5C,CAApB,CAlCO;IAmCtB;IACAoC,iBAAiB,EAAEvF,SAAS,CAACmD,IApCP;IAqCtBqC,QAAQ,EAAExF,SAAS,CAACmD,IArCE;IAsCtBsC,QAAQ,EAAEzF,SAAS,CAACmD,IAtCE;IAuCtBuC,oBAAoB,EAAE1F,SAAS,CAACmD,IAvCV;IAwCtBwC,uBAAuB,EAAE3F,SAAS,CAACkF,KAxCb;IAyCtBU,gBAAgB,EAAE5F,SAAS,CAACkF,KAzCN;IA0CtBW,QAAQ,EAAE7F,SAAS,CAACwE,IA1CE;IA2CtBsB,cAAc,EAAE9F,SAAS,CAACuE,SAAV,CAAoB,CAACvE,SAAS,CAACwE,IAAX,EAAiBxE,SAAS,CAACmD,IAA3B,CAApB,CA3CM;IA6CtB4C,eAAe,EAAE/F,SAAS,CAACuD,GA7CL;IA8CtByC,iBAAiB,EAAEhG,SAAS,CAACwE,IA9CP;IAgDtB;IACA;IACA;IACA;IACA;IAEA;IACAyB,UAAU,EAAEjG,SAAS,CAACmD,IAvDA;IAwDtB+C,cAAc,EAAElG,SAAS,CAACgD,MAxDJ;IAyDtBmD,SAAS,EAAEnG,SAAS,CAACgD,MAzDC;IA0DtBoD,oBAAoB,EAAEpG,SAAS,CAACgD,MA1DV;IA2DtBqD,SAAS,EAAErG,SAAS,CAACuD,GA3DC;IA4DtB+C,SAAS,EAAEtG,SAAS,CAACuD,GA5DC;IA6DtBgD,UAAU,EAAEvG,SAAS,CAACuD,GA7DA;IA8DtBiD,YAAY,EAAExG,SAAS,CAACuD,GA9DF;IA+DtBkD,eAAe,EAAEzG,SAAS,CAACuD;EA/DL,CAAD,EAgEpB;IACDR,SAAS,EAAE,gBADV;IAEDE,UAAU,EAAE,gBAFX;IAGDU,UAAU,EAAE,IAHX;IAIDI,oBAAoB,EAAE,IAJrB;IAKDW,mBAAmB,EAAEjE,UALpB;IAOD;IACA;IACA;IACA2E,kBAAkB,EAAE,OAVnB;IAWDC,iBAAiB,EAAE,OAXlB;IAYDG,QAAQ,EAAE,KAZT;IAaDO,eAAe,EAAE,WAbhB;IAcDlB,aAAa,EAAE,EAdd;IAeDE,qBAAqB,EAAE,SAASA,qBAAT,GAAiC;MACtD,OAAO,IAAP;IACD;EAjBA,CAhEoB,CAHZ;EAuFX2B,IAAI,EAAE,SAASA,IAAT,GAAgB;IACpB3G,OAAO,CAAC,KAAK4G,MAAL,CAAYF,eAAb,EAA8B,2BAA9B,CAAP;IACA,IAAIG,OAAO,GAAG,KAAKD,MAAnB;IAAA,IACI1D,UAAU,GAAG2D,OAAO,CAAC3D,UADzB;IAAA,IAEIQ,WAAW,GAAGmD,OAAO,CAACnD,WAF1B;IAAA,IAGIJ,IAAI,GAAGuD,OAAO,CAACvD,IAHnB;IAKA,KAAKX,YAAL,GAAoB,EAApB;IACA,KAAKmE,WAAL,GAAmBlG,SAAS,EAA5B;IACA,KAAKmG,gBAAL,GAAwBnG,SAAS,EAAjC,CAToB,CAWpB;IACA;;IACA,KAAKoG,MAAL,GAAcnG,cAAc,CAACqC,UAAU,GAAG,OAAd,CAA5B;IAEA,IAAI+D,KAAK,GAAG;MACVC,KAAK,EAAE5D,IAAI,IAAII,WADL;MAEVyD,UAAU,EAAE,EAFF;MAGVC,sBAAsB,EAAE,EAHd;MAIVC,cAAc,EAAE,EAJN;MAIU;MACpBC,kBAAkB,EAAE,EALV;MAKc;MACxBC,cAAc,EAAE,EANN;MAOVC,YAAY,EAAE,IAAIC,GAAJ,EAPJ;MAQVC,YAAY,EAAE,IAAID,GAAJ,EARJ;MASVE,YAAY,EAAE,EATJ;MAUVC,UAAU,EAAE,EAVF;MAWVC,KAAK,EAAE,IAXG;MAYVC,QAAQ,EAAEvF,SAZA;MAaVwF,UAAU,EAAExF,SAbF;MAcVyF,kBAAkB,EAAEzF;IAdV,CAAZ;IAgBA,IAAI0F,QAAQ,GAAG,KAAKC,eAAL,CAAqB,KAAKtB,MAA1B,EAAkCK,KAAlC,CAAf;IACA,OAAOrH,QAAQ,CAAC,EAAD,EAAKqH,KAAL,EAAYgB,QAAZ,CAAf;EACD,CAxHU;EAyHXE,OAAO,EAAE,SAASA,OAAT,GAAmB;IAC1B,OAAO;MACLC,YAAY,EAAE;QACZC,eAAe,EAAE,KAAKA,eADV;QAEZC,cAAc,EAAE,KAAKA,cAFT;QAGZC,iBAAiB,EAAE,KAAKC,kBAHZ;QAIZC,eAAe,EAAE,KAAKA,eAJV;QAKZC,wBAAwB,EAAE,KAAKA,wBALnB;QAOZC,gBAAgB,EAAE,KAAKA,gBAPX;QAQZC,eAAe,EAAE,KAAKA,eARV;QASZC,cAAc,EAAE,KAAKL,kBATT;QAWZM,mBAAmB,EAAE,KAAKA,mBAXd;QAYZC,oBAAoB,EAAE,KAAKA;MAZf;IADT,CAAP;EAgBD,CA1IU;EA4IXvG,KAAK,EAAE5C,QAAQ,CAAC,EAAD,EAAKuC,QAAQ,CAAC,CAAC,UAAD,EAAa,cAAb,EAA6B,OAA7B,CAAD,CAAb,EAAsD;IACnEuE,eAAe,EAAE,SAASA,eAAT,GAA2B;MAC1C,IAAIO,KAAK,GAAG,KAAKiB,eAAL,CAAqB,KAAKtB,MAA1B,EAAkC,KAAKoC,KAAvC,CAAZ;MACA,KAAKC,QAAL,CAAchC,KAAd;MACA,KAAKtE,YAAL,GAAoB,EAApB;IACD,CALkE;IAMnE,oBAAoB,SAASuG,eAAT,GAA2B;MAC7C,IAAIC,KAAK,GAAG,IAAZ;;MAEA,KAAKC,SAAL,CAAe,YAAY;QACzBD,KAAK,CAACE,eAAN;MACD,CAFD;IAGD,CAZkE;IAanE,eAAe,SAASC,UAAT,CAAoBhG,IAApB,EAA0B;MACvC,IAAIiG,MAAM,GAAG,IAAb;;MAEAC,UAAU,CAAC,YAAY;QACrB,IAAIxG,SAAS,GAAGuG,MAAM,CAAC3C,MAAP,CAAc5D,SAA9B;QACA,IAAIyG,MAAM,GAAGF,MAAM,CAACP,KAApB;QAAA,IACIU,iBAAiB,GAAGD,MAAM,CAACnC,kBAD/B;QAAA,IAEIqC,aAAa,GAAGF,MAAM,CAAClC,cAF3B;;QAIA,IAAIqC,UAAU,GAAGL,MAAM,CAACK,UAAP,EAAjB,CANqB,CAQrB;;;QACA,IAAI,CAACA,UAAD,IAAeF,iBAAiB,CAACpH,MAAjC,IAA2CgB,IAA3C,IAAmDiG,MAAM,CAACM,KAA9D,EAAqE;UACnE,IAAItG,KAAK,GAAGmG,iBAAiB,CAAC,CAAD,CAAjB,CAAqBnG,KAAjC;;UAEA,IAAIuG,cAAc,GAAGP,MAAM,CAACM,KAAP,CAAaE,OAAb,EAArB;UAAA,IACIC,YAAY,GAAGF,cAAc,CAACE,YADlC;;UAGA,IAAIC,IAAI,GAAGN,aAAa,CAACpG,KAAD,CAAb,IAAwB,EAAnC;UAAA,IACI2G,GAAG,GAAGD,IAAI,CAACC,GADf;;UAGA,IAAIC,QAAQ,GAAGH,YAAY,CAACE,GAAD,CAA3B;;UAEA,IAAIC,QAAJ,EAAc;YACZ,IAAIC,OAAO,GAAGD,QAAQ,CAACE,GAAvB;YACAvK,GAAG,CAAC,YAAY;cACd,IAAIwK,SAAS,GAAGf,MAAM,CAACM,KAAP,CAAaQ,GAA7B;cACA,IAAIE,gBAAgB,GAAG5I,kBAAkB,CAAC2I,SAAD,EAAYtH,SAAS,GAAG,WAAxB,CAAzC;cACA,IAAIwH,UAAU,GAAGjB,MAAM,CAACM,KAAP,CAAaY,SAAb,CAAuBC,OAAxC;;cAEA,IAAIN,OAAO,IAAIG,gBAAX,IAA+BC,UAAnC,EAA+C;gBAC7CzK,cAAc,CAACqK,OAAD,EAAUG,gBAAV,EAA4B;kBACxCI,kBAAkB,EAAE,IADoB;kBAExCC,SAAS,EAAEJ,UAAU,CAACK;gBAFkB,CAA5B,CAAd;cAID;YACF,CAXE,CAAH;UAYD;QACF;MACF,CApCS,CAAV;IAqCD;EArDkE,CAAtD,CA5IJ;EAmMXC,OAAO,EAAE,SAASA,OAAT,GAAmB;IAC1B,IAAIC,MAAM,GAAG,IAAb;;IAEA,KAAK3B,SAAL,CAAe,YAAY;MACzB,IAAI4B,QAAQ,GAAGD,MAAM,CAACnE,MAAtB;MAAA,IACInD,SAAS,GAAGuH,QAAQ,CAACvH,SADzB;MAAA,IAEIS,QAAQ,GAAG8G,QAAQ,CAAC9G,QAFxB;;MAIA,IAAIT,SAAS,IAAI,CAACS,QAAlB,EAA4B;QAC1B6G,MAAM,CAACE,KAAP;MACD;IACF,CARD;EASD,CA/MU;EAkNXC,OAAO,EAAE;IACPhD,eAAe,EAAE,SAASA,eAAT,CAAyBiD,SAAzB,EAAoCC,SAApC,EAA+C;MAC9D,IAAIC,CAAC,GAAG,KAAKC,cAAb;MACA,IAAIC,qBAAqB,GAAGH,SAAS,CAACxD,UAAtC;MAAA,IACI4D,SAAS,GAAGD,qBAAqB,KAAKhJ,SAA1B,GAAsC,EAAtC,GAA2CgJ,qBAD3D;MAEA,IAAIhG,aAAa,GAAG4F,SAAS,CAAC5F,aAA9B;MAAA,IACIC,iBAAiB,GAAG2F,SAAS,CAAC3F,iBADlC;MAAA,IAEIO,cAAc,GAAGoF,SAAS,CAACpF,cAF/B;MAAA,IAGIV,kBAAkB,GAAG8F,SAAS,CAAC9F,kBAHnC;MAAA,IAIID,kBAAkB,GAAG+F,SAAS,CAAC/F,kBAJnC;MAMA,IAAI6C,QAAQ,GAAG;QACbL,UAAU,EAAEhI,QAAQ,CAAC,EAAD,EAAKuL,SAAL,CADP;QAEbtD,KAAK,EAAE;MAFM,CAAf;MAIA,IAAI4D,IAAI,GAAG,IAAX,CAd8D,CAe9D;;MACA,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;QACvC,IAAIJ,SAAS,CAACG,QAAD,CAAT,KAAwBR,SAAS,CAACQ,QAAD,CAAjC,IAA+CF,IAAI,CAAC9I,YAAL,CAAkBgJ,QAAlB,CAAnD,EAAgF;UAC9EC,OAAO,CAACT,SAAS,CAACQ,QAAD,CAAV,EAAsBH,SAAS,CAACG,QAAD,CAA/B,CAAP;UACA,OAAO,IAAP;QACD;;QACD,OAAO,KAAP;MACD;;MAED,IAAIE,YAAY,GAAG,KAAnB,CAxB8D,CA0B9D;;MACAH,YAAY,CAAC,MAAD,EAAS,UAAUI,SAAV,EAAqB;QACxC7D,QAAQ,CAACf,KAAT,GAAiB4E,SAAjB;MACD,CAFW,CAAZ,CA3B8D,CA+B9D;;MACA,IAAIC,SAAS,GAAG,KAAK,CAArB;MACA,IAAIC,eAAe,GAAG,KAAtB;MACA,IAAIC,mBAAmB,GAAG,KAA1B;MACAP,YAAY,CAAC,UAAD,EAAa,UAAUI,SAAV,EAAqB;QAC5CC,SAAS,GAAG9K,iBAAiB,CAACoK,CAAD,EAAIS,SAAJ,CAA7B;QACAE,eAAe,GAAG,IAAlB;MACD,CAHW,CAAZ;MAKAN,YAAY,CAAC,oBAAD,EAAuB,UAAUI,SAAV,EAAqBI,SAArB,EAAgC;QACjE,IAAI,CAACJ,SAAL,EAAgB;QAEhB,IAAIK,IAAI,GAAG,CAACD,SAAD,IAAcA,SAAS,KAAK,IAA5B,GAAmC,EAAnC,GAAwCA,SAAnD,CAHiE,CAKjE;;QACA,IAAI,CAACrM,YAAY,CAACiM,SAAD,EAAYK,IAAZ,CAAjB,EAAoC;UAClCF,mBAAmB,GAAG,IAAtB;QACD;MACF,CATW,CAAZ,CAxC8D,CAmD9D;;MACA,IAAI7G,kBAAkB,KAAK4G,eAAe,IAAIC,mBAAxB,CAAtB,EAAoE;QAClE,IAAIG,YAAY,GAAGxM,QAAQ,CAAC;UAC1ByM,EAAE,EAAE,IADsB;UAE1BC,GAAG,EAAE,KAFqB;UAG1BC,OAAO,EAAE;QAHiB,CAAD,EAIxBnH,kBAAkB,KAAK,IAAvB,GAA8BA,kBAA9B,GAAmD,EAJ3B,CAA3B;;QAKA2G,SAAS,GAAG9K,iBAAiB,CAACoK,CAAD,EAAIrK,mBAAmB,CAACmK,SAAS,CAACjG,QAAX,EAAqBkH,YAArB,CAAvB,CAA7B;MACD,CA3D6D,CA6D9D;;;MACA,IAAI,CAACjB,SAAS,CAACjG,QAAf,EAAyB;QACvB;QACA;QACA;QACA6G,SAAS,GAAG9J,WAAW,CAAC,KAAKuK,MAAL,CAAY,SAAZ,CAAD,CAAvB;MACD,CAnE6D,CAqE9D;;;MACA,IAAIT,SAAJ,EAAe;QACb,IAAIU,WAAW,GAAGvL,qBAAqB,CAAC6K,SAAD,CAAvC;QACA9D,QAAQ,CAACF,UAAT,GAAsBgE,SAAtB;QACA9D,QAAQ,CAACT,YAAT,GAAwBiF,WAAW,CAACC,WAApC;QACAzE,QAAQ,CAACV,cAAT,GAA0BkF,WAAW,CAAC9C,aAAtC;QACA1B,QAAQ,CAACP,YAAT,GAAwB+E,WAAW,CAACE,WAApC;QAEAd,YAAY,GAAG,IAAf;MACD,CA9E6D,CAgF9D;;;MACA,IAAIT,SAAS,CAACvD,KAAd,EAAqB;QACnB6D,YAAY,CAAC,cAAD,EAAiB,UAAUI,SAAV,EAAqB;UAChD7D,QAAQ,CAACd,UAAT,GAAsBrG,mBAAmB,CAACgL,SAAD,EAAYX,SAAZ,CAAzC;UACAU,YAAY,GAAG,IAAf;QACD,CAHW,CAAZ;MAID;;MAEDH,YAAY,CAAC,OAAD,EAAU,UAAUI,SAAV,EAAqB;QACzC7D,QAAQ,CAACd,UAAT,GAAsBrG,mBAAmB,CAACgL,SAAD,EAAYX,SAAZ,CAAzC;QACAU,YAAY,GAAG,IAAf;MACD,CAHW,CAAZ,CAxF8D,CA6F9D;;MACA,IAAIA,YAAJ,EAAkB;QAChB;QACA,IAAIe,aAAa,GAAG,EAApB;QACA,IAAIC,iBAAiB,GAAG,EAAxB;QACA,IAAIC,OAAO,GAAG,EAAd,CAJgB,CAMhB;;QACA,IAAIC,eAAe,GAAG9E,QAAQ,CAACd,UAA/B;;QACA,IAAI,CAAC4F,eAAL,EAAsB;UACpB;UACAA,eAAe,GAAG,GAAGC,MAAH,CAAUrN,kBAAkB,CAACyL,SAAS,CAACjE,UAAX,CAA5B,EAAoDxH,kBAAkB,CAACyL,SAAS,CAAC/D,cAAX,CAAtE,CAAlB;QACD,CAXe,CAahB;;;QACA,IAAI4F,WAAW,GAAG,EAAlB;QACAF,eAAe,CAACtK,OAAhB,CAAwB,UAAUyK,YAAV,EAAwB;UAC9C,IAAI3J,KAAK,GAAG2J,YAAY,CAAC3J,KAAzB;UAAA,IACI4J,KAAK,GAAGD,YAAY,CAACC,KADzB;UAGA,IAAIC,MAAM,GAAG,CAACnF,QAAQ,CAACV,cAAT,IAA2B6D,SAAS,CAAC7D,cAAtC,EAAsDhE,KAAtD,CAAb;UACA0J,WAAW,CAAC1J,KAAD,CAAX,GAAqB4J,KAArB;;UAEA,IAAIC,MAAJ,EAAY;YACVN,OAAO,CAACO,IAAR,CAAaD,MAAM,CAAClD,GAApB;YACA2C,iBAAiB,CAACQ,IAAlB,CAAuBH,YAAvB;YACA;UACD,CAX6C,CAa9C;;;UACAN,aAAa,CAACS,IAAd,CAAmBH,YAAnB;QACD,CAfD,EAfgB,CAgChB;;QACA,IAAI3H,aAAa,IAAI,CAACC,iBAAtB,EAAyC;UACvC;UACA,IAAI8H,aAAa,GAAGnM,YAAY,CAAC2L,OAAD,EAAU,IAAV,EAAgB7E,QAAQ,CAACP,YAAT,IAAyB0D,SAAS,CAAC1D,YAAnD,CAAhC;UAAA,IACI6F,WAAW,GAAGD,aAAa,CAACC,WADhC,CAFuC,CAKvC;;;UAGAtF,QAAQ,CAACd,UAAT,GAAsBoG,WAAW,CAACC,GAAZ,CAAgB,UAAUtD,GAAV,EAAe;YACnD,IAAIuD,GAAG,GAAG,CAACxF,QAAQ,CAACP,YAAT,IAAyB0D,SAAS,CAAC1D,YAApC,EAAkDgG,GAAlD,CAAsDxD,GAAtD,EAA2D3G,KAArE;;YAEA,IAAIoK,YAAY,GAAG;cACjBpK,KAAK,EAAEkK;YADU,CAAnB;;YAIA,IAAIR,WAAW,CAACQ,GAAD,CAAX,KAAqBlL,SAAzB,EAAoC;cAClCoL,YAAY,CAACR,KAAb,GAAqBF,WAAW,CAACQ,GAAD,CAAhC;YACD;;YAED,OAAOE,YAAP;UACD,CAZqB,CAAtB;QAaD,CArBD,MAqBO;UACL1F,QAAQ,CAACd,UAAT,GAAsB0F,iBAAtB;QACD,CAxDe,CA0DhB;;;QACA5E,QAAQ,CAACZ,cAAT,GAA0BuF,aAA1B,CA3DgB,CA6DhB;;QACA3E,QAAQ,CAACX,kBAAT,GAA8BvG,mBAAmB,CAACkH,QAAQ,CAACd,UAAV,EAAsBgE,SAAtB,EAAiClD,QAAQ,CAACV,cAAT,IAA2B6D,SAAS,CAAC7D,cAAtE,CAAjD;MACD,CA7J6D,CA+J9D;MACA;MACA;;;MACAmE,YAAY,CAAC,YAAD,EAAe,UAAUI,SAAV,EAAqB;QAC9C,IAAIA,SAAS,KAAK,IAAlB,EAAwB;UACtB7D,QAAQ,CAACN,YAAT,GAAwBmE,SAAxB;QACD;MACF,CAJW,CAAZ,CAlK8D,CAwK9D;;MACAJ,YAAY,CAAC,aAAD,EAAgB,UAAUI,SAAV,EAAqB;QAC/C7D,QAAQ,CAACN,YAAT,GAAwBmE,SAAxB;MACD,CAFW,CAAZ,CAzK8D,CA6K9D;;MACA,IAAI7D,QAAQ,CAACN,YAAT,KAA0BpF,SAA1B,IAAuC6I,SAAS,CAACzD,YAAV,IAA0BoE,SAArE,EAAgF;QAC9E,IAAIhI,WAAW,GAAGkE,QAAQ,CAACN,YAAT,KAA0BpF,SAA1B,GAAsC0F,QAAQ,CAACN,YAA/C,GAA8DyD,SAAS,CAACzD,YAA1F;QACA,IAAIiG,gBAAgB,GAAGC,MAAM,CAAC9J,WAAD,CAAN,CAAoB+J,WAApB,EAAvB;QAEA,IAAIC,gBAAgB,GAAGhI,cAAvB;;QACA,IAAIA,cAAc,KAAK,KAAvB,EAA8B;UAC5B;UACAgI,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;YAC7C,OAAO,IAAP;UACD,CAFD;QAGD,CALD,MAKO,IAAI,OAAOA,gBAAP,KAA4B,UAAhC,EAA4C;UACjD;UACAA,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,CAA1B,EAA6BC,IAA7B,EAAmC;YACpD,IAAIC,SAAS,GAAGL,MAAM,CAAC7L,YAAY,CAACiM,IAAD,CAAZ,CAAmB5I,kBAAnB,CAAD,CAAN,CAA+CyI,WAA/C,EAAhB;YACA,OAAOI,SAAS,CAACC,OAAV,CAAkBP,gBAAlB,MAAwC,CAAC,CAAhD;UACD,CAHD;QAID;;QAED3F,QAAQ,CAACD,kBAAT,GAA8BvG,aAAa,CAAC,KAAK6J,cAAN,EAAsBrD,QAAQ,CAACF,UAAT,IAAuBqD,SAAS,CAACrD,UAAvD,EAAmEhE,WAAnE,EAAgFgK,gBAAhF,EAAkG9F,QAAQ,CAACV,cAAT,IAA2B6D,SAAS,CAAC7D,cAAvI,EAAuJ3F,UAAvJ,CAA3C;MACD,CAjM6D,CAmM9D;;;MACA,IAAIiK,YAAY,IAAItG,aAAhB,IAAiC,CAACC,iBAAlC,KAAwDyC,QAAQ,CAACN,YAAT,IAAyByD,SAAS,CAACzD,YAA3F,CAAJ,EAA8G;QAC5GM,QAAQ,CAACb,sBAAT,GAAkChG,kBAAkB,CAAC6G,QAAQ,CAACd,UAAV,EAAsBc,QAAQ,CAACV,cAAT,IAA2B6D,SAAS,CAAC7D,cAA3D,CAApD;MACD,CAtM6D,CAwM9D;;;MACAmE,YAAY,CAAC,qBAAD,EAAwB,YAAY;QAC9CzD,QAAQ,CAACX,kBAAT,GAA8BW,QAAQ,CAACX,kBAAT,IAA+BvG,mBAAmB,CAACkH,QAAQ,CAACd,UAAT,IAAuBiE,SAAS,CAACjE,UAAlC,EAA8CgE,SAA9C,EAAyDlD,QAAQ,CAACV,cAAT,IAA2B6D,SAAS,CAAC7D,cAA9F,CAAhF;MACD,CAFW,CAAZ;MAIA,OAAOU,QAAP;IACD,CA/MM;IAiNP;IACAI,eAAe,EAAE,SAASA,eAAT,GAA2B;MAC1C,KAAKY,QAAL,CAAc;QAAEnB,QAAQ,EAAE;MAAZ,CAAd;IACD,CApNM;IAqNPQ,cAAc,EAAE,SAASA,cAAT,GAA0B;MACxC,KAAKW,QAAL,CAAc;QAAEnB,QAAQ,EAAE;MAAZ,CAAd,EADwC,CAGxC;MACA;IACD,CA1NM;IA6NP;IACAU,kBAAkB,EAAE,SAASA,kBAAT,CAA4B4F,KAA5B,EAAmC;MACrD,IAAI9K,IAAI,GAAG,KAAK0F,KAAL,CAAW9B,KAAtB;MACA,IAAImH,OAAO,GAAGD,KAAK,CAACC,OAApB;;MAGA,IAAI,CAAC/K,IAAL,EAAW;QACT,IAAI,CAACpD,OAAO,CAACoO,KAAT,EAAgBpO,OAAO,CAACqO,IAAxB,EAA8BJ,OAA9B,CAAsCE,OAAtC,MAAmD,CAAC,CAAxD,EAA2D;UACzD,KAAKG,YAAL,CAAkB,IAAlB;QACD;MACF,CAJD,MAIO,IAAItO,OAAO,CAACuO,GAAR,KAAgBJ,OAApB,EAA6B;QAClC,KAAKG,YAAL,CAAkB,KAAlB;MACD,CAFM,MAEA,IAAI,CAACtO,OAAO,CAACwO,EAAT,EAAaxO,OAAO,CAACqO,IAArB,EAA2BrO,OAAO,CAACyO,IAAnC,EAAyCzO,OAAO,CAAC0O,KAAjD,EAAwDT,OAAxD,CAAgEE,OAAhE,MAA6E,CAAC,CAAlF,EAAqF;QAC1F;QACAD,KAAK,CAACS,eAAN;MACD;IACF,CA7OM;IA8OPC,UAAU,EAAE,SAASA,UAAT,CAAoBnB,YAApB,EAAkCM,IAAlC,EAAwCc,aAAxC,EAAuD;MACjE,KAAKC,MAAL,CAAY,UAAZ,EAAwBrB,YAAxB,EAAsCM,IAAtC,EAA4Cc,aAA5C;IACD,CAhPM;IAiPPtG,eAAe,EAAE,SAASA,eAAT,CAAyB2F,KAAzB,EAAgC;MAC/C,IAAIlK,QAAQ,GAAG,KAAK0C,MAAL,CAAY1C,QAA3B;MAEA,IAAIA,QAAJ,EAAc;MAEd,KAAK+K,aAAL,CAAmB,EAAnB,EAAuB,EAAvB;;MAEA,IAAI,CAAC,KAAKC,uBAAL,EAAL,EAAqC;QACnC,KAAKC,oBAAL,CAA0B;UACxBxH,YAAY,EAAE,EADU;UAExBK,kBAAkB,EAAE;QAFI,CAA1B;MAID;;MAEDoG,KAAK,CAACS,eAAN;IACD,CAhQM;IAiQPnG,wBAAwB,EAAE,SAASA,wBAAT,CAAkC0F,KAAlC,EAAyCgB,WAAzC,EAAsD;MAC9EhB,KAAK,CAACS,eAAN;MAEA,IAAIQ,OAAO,GAAG,KAAKrG,KAAnB;MAAA,IACIsG,SAAS,GAAGD,OAAO,CAAClI,UADxB;MAAA,IAEIyF,aAAa,GAAGyC,OAAO,CAAChI,cAF5B;MAAA,IAGIsC,aAAa,GAAG0F,OAAO,CAAC9H,cAH5B;MAIA,IAAIgI,QAAQ,GAAG,KAAK3I,MAApB;MAAA,IACIrB,aAAa,GAAGgK,QAAQ,CAAChK,aAD7B;MAAA,IAEIC,iBAAiB,GAAG+J,QAAQ,CAAC/J,iBAFjC;MAAA,IAGIF,iBAAiB,GAAGiK,QAAQ,CAACjK,iBAHjC;MAAA,IAIIpB,QAAQ,GAAGqL,QAAQ,CAACrL,QAJxB;MAMA,IAAIA,QAAJ,EAAc,OAbgE,CAe9E;;MACA,IAAIsL,aAAa,GAAG7F,aAAa,CAACyF,WAAD,CAAjC,CAhB8E,CAkB9E;;MACA,IAAIK,YAAY,GAAGH,SAAnB;;MACA,IAAIE,aAAJ,EAAmB;QACjB;QACA,IAAIjK,aAAa,IAAI,CAACC,iBAAtB,EAAyC;UACvCiK,YAAY,GAAGH,SAAS,CAACI,MAAV,CAAiB,UAAUC,KAAV,EAAiB;YAC/C,IAAIpM,KAAK,GAAGoM,KAAK,CAACpM,KAAlB;YAEA,IAAI6J,MAAM,GAAGzD,aAAa,CAACpG,KAAD,CAA1B;YACA,OAAO,CAACjC,YAAY,CAAC8L,MAAM,CAACwC,GAAR,EAAaJ,aAAa,CAACI,GAA3B,CAApB;UACD,CALc,CAAf;QAMD,CAPD,MAOO;UACLH,YAAY,GAAGH,SAAS,CAACI,MAAV,CAAiB,UAAUG,KAAV,EAAiB;YAC/C,IAAItM,KAAK,GAAGsM,KAAK,CAACtM,KAAlB;YACA,OAAOA,KAAK,KAAK6L,WAAjB;UACD,CAHc,CAAf;QAID;MACF;;MAED,IAAIU,WAAW,GAAGN,aAAa,GAAGA,aAAa,CAACvB,IAAjB,GAAwB,IAAvD;MAEA,IAAI8B,SAAS,GAAG;QACdC,YAAY,EAAEZ,WADA;QAEdU,WAAW,EAAEA;MAFC,CAAhB;MAIA,IAAIG,YAAY,GAAG;QACjBhC,IAAI,EAAE6B;MADW,CAAnB,CA3C8E,CA+C9E;;MACA,IAAIvK,aAAJ,EAAmB;QACjB,IAAI2K,kBAAkB,GAAGT,YAAY,CAACjC,GAAb,CAAiB,UAAU2C,KAAV,EAAiB;UACzD,IAAI5M,KAAK,GAAG4M,KAAK,CAAC5M,KAAlB;UACA,OAAOoG,aAAa,CAACpG,KAAD,CAApB;QACD,CAHwB,CAAzB;QAKA0M,YAAY,CAAC7B,KAAb,GAAqB,OAArB;QACA6B,YAAY,CAACG,OAAb,GAAuB,KAAvB;QACAH,YAAY,CAACI,YAAb,GAA4BH,kBAAkB,CAAC1C,GAAnB,CAAuB,UAAU8C,KAAV,EAAiB;UAClE,IAAIrC,IAAI,GAAGqC,KAAK,CAACrC,IAAjB;UACA,OAAOA,IAAP;QACD,CAH2B,CAA5B;QAIAgC,YAAY,CAACM,qBAAb,GAAqCL,kBAAkB,CAAC1C,GAAnB,CAAuB,UAAUgD,KAAV,EAAiB;UAC3E,IAAIvC,IAAI,GAAGuC,KAAK,CAACvC,IAAjB;UAAA,IACI2B,GAAG,GAAGY,KAAK,CAACZ,GADhB;UAEA,OAAO;YACL3B,IAAI,EAAEA,IADD;YAEL2B,GAAG,EAAEA;UAFA,CAAP;QAID,CAPoC,CAArC;;QASA,IAAIpK,iBAAJ,EAAuB;UACrBuK,SAAS,CAACU,eAAV,GAA4BR,YAAY,CAACI,YAAzC;QACD,CAFD,MAEO;UACL;UACAN,SAAS,CAACU,eAAV,GAA4BpP,eAAe,CAAC6O,kBAAD,CAAf,CAAoC1C,GAApC,CAAwC,UAAUkD,KAAV,EAAiB;YACnF,IAAIzC,IAAI,GAAGyC,KAAK,CAACzC,IAAjB;YACA,OAAOA,IAAP;UACD,CAH2B,CAA5B;QAID;MACF,CA9BD,MA8BO;QACLgC,YAAY,CAAC7B,KAAb,GAAqB,QAArB;QACA6B,YAAY,CAACU,QAAb,GAAwB,KAAxB;QACAV,YAAY,CAACW,aAAb,GAA6BnB,YAAY,CAACjC,GAAb,CAAiB,UAAUqD,KAAV,EAAiB;UAC7D,IAAItN,KAAK,GAAGsN,KAAK,CAACtN,KAAlB;UACA,OAAO,CAACoG,aAAa,CAACpG,KAAD,CAAb,IAAwB,EAAzB,EAA6B0K,IAApC;QACD,CAH4B,CAA7B;MAID,CArF6E,CAuF9E;;;MACA,IAAI6C,gBAAgB,GAAGlE,aAAa,CAAC8C,MAAd,CAAqB,UAAUqB,KAAV,EAAiB;QAC3D,IAAIxN,KAAK,GAAGwN,KAAK,CAACxN,KAAlB;QACA,OAAOA,KAAK,KAAK6L,WAAjB;MACD,CAHsB,CAAvB;MAIA,IAAIzB,YAAY,GAAG,KAAK,CAAxB;;MACA,IAAI,KAAKpM,cAAL,EAAJ,EAA2B;QACzBoM,YAAY,GAAG;UACbR,KAAK,EAAE2C,WAAW,GAAG9N,YAAY,CAAC8N,WAAD,CAAZ,CAA0BxK,iBAA1B,CAAH,GAAkD,IADvD;UAEb/B,KAAK,EAAE6L;QAFM,CAAf;MAID,CALD,MAKO;QACLzB,YAAY,GAAGyB,WAAf;MACD;;MAED,KAAKN,UAAL,CAAgBnB,YAAhB,EAA8BmC,WAA9B,EAA2CG,YAA3C;MAEA,KAAKhB,aAAL,CAAmB6B,gBAAnB,EAAqCrB,YAArC,EAAmDM,SAAnD;IACD,CA1WM;IA6WP;IACAiB,cAAc,EAAE,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,QAA/B,EAAyCnC,aAAzC,EAAwDoC,aAAxD,EAAuE;MACrF,IAAIlD,IAAI,GAAGc,aAAa,CAACd,IAAzB;MACA,IAAI1K,KAAK,GAAG0K,IAAI,CAACrH,MAAL,CAAYrD,KAAxB;MACA,IAAI6N,OAAO,GAAG,KAAKpI,KAAnB;MAAA,IACI4D,aAAa,GAAGwE,OAAO,CAAC/J,cAD5B;MAAA,IAEIsC,aAAa,GAAGyH,OAAO,CAAC7J,cAF5B;MAAA,IAGIoF,WAAW,GAAGyE,OAAO,CAAC1J,YAH1B;MAAA,IAII3D,WAAW,GAAGqN,OAAO,CAACzJ,YAJ1B;MAKA,IAAI0J,QAAQ,GAAG,KAAKzK,MAApB;MAAA,IACI1C,QAAQ,GAAGmN,QAAQ,CAACnN,QADxB;MAAA,IAEIJ,UAAU,GAAGuN,QAAQ,CAACvN,UAF1B;MAAA,IAGIwB,iBAAiB,GAAG+L,QAAQ,CAAC/L,iBAHjC;MAAA,IAIInC,QAAQ,GAAGkO,QAAQ,CAAClO,QAJxB;MAAA,IAKIoC,aAAa,GAAG8L,QAAQ,CAAC9L,aAL7B;MAAA,IAMIC,iBAAiB,GAAG6L,QAAQ,CAAC7L,iBANjC;MAAA,IAOIxB,oBAAoB,GAAGqN,QAAQ,CAACrN,oBAPpC;MASA,IAAImJ,KAAK,GAAGc,IAAI,CAACrH,MAAL,CAAYtB,iBAAZ,CAAZ;MAEA,IAAIpB,QAAJ,EAAc,OAnBuE,CAqBrF;;MACA,IAAIyJ,YAAY,GAAG,KAAK,CAAxB;;MACA,IAAI,KAAKpM,cAAL,EAAJ,EAA2B;QACzBoM,YAAY,GAAG;UACbpK,KAAK,EAAEA,KADM;UAEb4J,KAAK,EAAEA;QAFM,CAAf;MAID,CALD,MAKO;QACLQ,YAAY,GAAGpK,KAAf;MACD,CA9BoF,CAgCrF;;;MACA,IAAI0N,KAAJ,EAAW;QACT,KAAKjC,MAAL,CAAY,QAAZ,EAAsBrB,YAAtB,EAAoCM,IAApC,EAA0Cc,aAA1C;MACD,CAFD,MAEO;QACL,KAAKC,MAAL,CAAY,UAAZ,EAAwBrB,YAAxB,EAAsCM,IAAtC,EAA4Cc,aAA5C;MACD,CArCoF,CAuCrF;MACA;;;MACA,IAAIU,YAAY,GAAGyB,QAAQ,CAAC1D,GAAT,CAAa,UAAUS,IAAV,EAAgB;QAC9C,IAAIlL,KAAK,GAAGf,YAAY,CAACiM,IAAD,CAAxB;QACA,OAAO;UACL1K,KAAK,EAAER,KAAK,CAACQ,KADR;UAEL4J,KAAK,EAAEpK,KAAK,CAACuC,iBAAD;QAFP,CAAP;MAID,CANkB,CAAnB,CAzCqF,CAiDrF;MACA;;MACA,IAAIC,aAAa,IAAI,CAACC,iBAAtB,EAAyC;QACvC,IAAIsH,OAAO,GAAG2C,YAAY,CAACjC,GAAb,CAAiB,UAAU8D,MAAV,EAAkB;UAC/C,IAAI7D,GAAG,GAAG6D,MAAM,CAAC/N,KAAjB;UACA,OAAOoG,aAAa,CAAC8D,GAAD,CAAb,CAAmBvD,GAA1B;QACD,CAHa,CAAd;;QAIA,IAAI+G,KAAJ,EAAW;UACTnE,OAAO,GAAG3L,YAAY,CAAC2L,OAAD,EAAU,IAAV,EAAgBH,WAAhB,CAAZ,CAAyCY,WAAnD;QACD,CAFD,MAEO;UACLT,OAAO,GAAG3L,YAAY,CAAC,CAACwI,aAAa,CAACpG,KAAD,CAAb,CAAqB2G,GAAtB,CAAD,EAA6B,KAA7B,EAAoCyC,WAApC,EAAiD;YACrEY,WAAW,EAAET;UADwD,CAAjD,CAAZ,CAEPS,WAFH;QAGD;;QACDkC,YAAY,GAAG3C,OAAO,CAACU,GAAR,CAAY,UAAUtD,GAAV,EAAe;UACxC,IAAInH,KAAK,GAAGf,YAAY,CAAC2K,WAAW,CAACe,GAAZ,CAAgBxD,GAAhB,EAAqB+D,IAAtB,CAAxB;UACA,OAAO;YACL1K,KAAK,EAAER,KAAK,CAACQ,KADR;YAEL4J,KAAK,EAAEpK,KAAK,CAACuC,iBAAD;UAFP,CAAP;QAID,CANc,CAAf;MAOD,CAtEoF,CAwErF;;;MACA,IAAItB,oBAAoB,IAAIF,UAAU,KAAK,IAA3C,EAAiD;QAC/C;QACA,IAAI,CAAC,KAAKoL,uBAAL,EAAD,KAAoC/L,QAAQ,IAAIoC,aAAhD,CAAJ,EAAoE;UAClE,KAAK4J,oBAAL,CAA0B;YACxBxH,YAAY,EAAE,EADU;YAExBK,kBAAkB,EAAE;UAFI,CAA1B;QAID,CAP8C,CAS/C;QACA;QACA;;;QACA,IAAIjE,WAAW,IAAIA,WAAW,CAACzB,MAA/B,EAAuC;UACrC,KAAK0M,MAAL,CAAY,oBAAZ,EAAkC,EAAlC;;UACA,KAAKA,MAAL,CAAY,QAAZ,EAAsB,EAAtB;QACD;MACF,CAzFoF,CA2FrF;;;MACA,IAAIe,SAAS,GAAGnQ,QAAQ,CAAC,EAAD,EAAKuR,aAAL,EAAoB;QAC1CnB,YAAY,EAAEzM,KAD4B;QAE1CuM,WAAW,EAAE7B;MAF6B,CAApB,CAAxB;;MAKA,KAAKgB,aAAL,CAAmBrC,aAAnB,EAAkC6C,YAAlC,EAAgDM,SAAhD;IACD,CAhdM;IAidPpH,gBAAgB,EAAE,SAASA,gBAAT,CAA0BqF,CAA1B,EAA6Be,aAA7B,EAA4C;MAC5D,IAAIwC,OAAO,GAAG,KAAKvI,KAAnB;MAAA,IACIsG,SAAS,GAAGiC,OAAO,CAACpK,UADxB;MAAA,IAEIwC,aAAa,GAAG4H,OAAO,CAAChK,cAF5B;MAGA,IAAIiK,QAAQ,GAAG,KAAK5K,MAApB;MAAA,IACIrB,aAAa,GAAGiM,QAAQ,CAACjM,aAD7B;MAAA,IAEIpC,QAAQ,GAAGqO,QAAQ,CAACrO,QAFxB;MAIA,IAAIoC,aAAJ,EAAmB;;MAEnB,IAAI,CAACpC,QAAL,EAAe;QACb,KAAKqL,YAAL,CAAkB,KAAlB;MACD;;MAED,IAAIyC,KAAK,GAAGlC,aAAa,CAAC4B,QAA1B;MACA,IAAIc,aAAa,GAAG1C,aAAa,CAACd,IAAd,CAAmBrH,MAAnB,CAA0BrD,KAA9C;MAGA,IAAIkM,YAAY,GAAG,KAAK,CAAxB;;MAEA,IAAI,CAACtM,QAAL,EAAe;QACbsM,YAAY,GAAG,CAAC;UAAElM,KAAK,EAAEkO;QAAT,CAAD,CAAf;MACD,CAFD,MAEO;QACLhC,YAAY,GAAGH,SAAS,CAACI,MAAV,CAAiB,UAAUgC,MAAV,EAAkB;UAChD,IAAInO,KAAK,GAAGmO,MAAM,CAACnO,KAAnB;UACA,OAAOA,KAAK,KAAKkO,aAAjB;QACD,CAHc,CAAf;;QAIA,IAAIR,KAAJ,EAAW;UACTxB,YAAY,CAACpC,IAAb,CAAkB;YAAE9J,KAAK,EAAEkO;UAAT,CAAlB;QACD;MACF;;MAED,IAAIb,aAAa,GAAGnB,YAAY,CAACjC,GAAb,CAAiB,UAAUmE,MAAV,EAAkB;QACrD,IAAIpO,KAAK,GAAGoO,MAAM,CAACpO,KAAnB;QACA,OAAOoG,aAAa,CAACpG,KAAD,CAApB;MACD,CAHmB,EAGjBmM,MAHiB,CAGV,UAAUtC,MAAV,EAAkB;QAC1B,OAAOA,MAAP;MACD,CALmB,EAKjBI,GALiB,CAKb,UAAUoE,MAAV,EAAkB;QACvB,IAAI3D,IAAI,GAAG2D,MAAM,CAAC3D,IAAlB;QACA,OAAOA,IAAP;MACD,CARmB,CAApB;MAUA,KAAK+C,cAAL,CAAoBC,KAApB,EAA2BL,aAA3B,EAA0C7B,aAA1C,EAAyD;QAAE4B,QAAQ,EAAEM;MAAZ,CAAzD;IACD,CA5fM;IA6fPrI,eAAe,EAAE,SAASA,eAAT,CAAyBoF,CAAzB,EAA4Be,aAA5B,EAA2C;MAC1D,IAAI8C,OAAO,GAAG,KAAK7I,KAAnB;MAAA,IACIjF,WAAW,GAAG8N,OAAO,CAAClK,YAD1B;MAAA,IAEIgF,WAAW,GAAGkF,OAAO,CAACnK,YAF1B;MAAA,IAGIiC,aAAa,GAAGkI,OAAO,CAACtK,cAH5B;MAAA,IAII+H,SAAS,GAAGuC,OAAO,CAAC1K,UAJxB;MAKA,IAAI3B,iBAAiB,GAAG,KAAKoB,MAAL,CAAYpB,iBAApC;MACA,IAAI6K,YAAY,GAAGtB,aAAa,CAACsB,YAAjC;MAAA,IACIE,qBAAqB,GAAGxB,aAAa,CAACwB,qBAD1C;MAGA,IAAIU,KAAK,GAAGlC,aAAa,CAACqB,OAA1B;MAEA,IAAIL,SAAS,GAAG;QACdK,OAAO,EAAEa;MADK,CAAhB;MAIA,IAAIa,eAAe,GAAGzB,YAAtB,CAhB0D,CAkB1D;MACA;MACA;MACA;;MACA,IAAItM,WAAJ,EAAiB;QACf,IAAIgO,UAAU,GAAGzC,SAAS,CAAC9B,GAAV,CAAc,UAAUwE,MAAV,EAAkB;UAC/C,IAAIzO,KAAK,GAAGyO,MAAM,CAACzO,KAAnB;UACA,OAAOoG,aAAa,CAACpG,KAAD,CAApB;QACD,CAHgB,EAGdmM,MAHc,CAGP,UAAUtC,MAAV,EAAkB;UAC1B,OAAOA,MAAP;QACD,CALgB,EAKdI,GALc,CAKV,UAAUyE,MAAV,EAAkB;UACvB,IAAI/H,GAAG,GAAG+H,MAAM,CAAC/H,GAAjB;UACA,OAAOA,GAAP;QACD,CARgB,CAAjB;QAUA,IAAI4C,OAAO,GAAG,KAAK,CAAnB;;QACA,IAAImE,KAAJ,EAAW;UACTnE,OAAO,GAAGoF,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,GAAGpF,MAAH,CAAUrN,kBAAkB,CAACoS,UAAD,CAA5B,EAA0CpS,kBAAkB,CAACmS,eAAe,CAACtE,GAAhB,CAAoB,UAAUS,IAAV,EAAgB;YAC5H,IAAIoE,aAAa,GAAGrQ,YAAY,CAACiM,IAAD,CAAhC;YAAA,IACI1K,KAAK,GAAG8O,aAAa,CAAC9O,KAD1B;;YAGA,OAAOoG,aAAa,CAACpG,KAAD,CAAb,CAAqB2G,GAA5B;UACD,CALyF,CAAD,CAA5D,CAAR,CAAX,CAAV;QAMD,CAPD,MAOO;UACL4C,OAAO,GAAG3L,YAAY,CAAC,CAACa,YAAY,CAAC+M,aAAa,CAACd,IAAf,CAAZ,CAAiCqE,QAAlC,CAAD,EAA8C,KAA9C,EAAqD3F,WAArD,EAAkE;YACtFY,WAAW,EAAEwE;UADyE,CAAlE,CAAZ,CAEPxE,WAFH;QAGD;;QAEDuE,eAAe,GAAGhF,OAAO,CAACU,GAAR,CAAY,UAAUtD,GAAV,EAAe;UAC3C,OAAOyC,WAAW,CAACe,GAAZ,CAAgBxD,GAAhB,EAAqB+D,IAA5B;QACD,CAFiB,CAAlB,CAzBe,CA6Bf;;QACA8B,SAAS,CAACU,eAAV,GAA4B3D,OAAO,CAACU,GAAR,CAAY,UAAUtD,GAAV,EAAe;UACrD,OAAOxI,WAAW,CAACiL,WAAW,CAACe,GAAZ,CAAgBxD,GAAhB,CAAD,CAAlB;QACD,CAF2B,CAA5B;MAGD,CAjCD,MAiCO,IAAI1E,iBAAJ,EAAuB;QAC5BuK,SAAS,CAACU,eAAV,GAA4B1B,aAAa,CAACsB,YAA1C;MACD,CAFM,MAEA;QACLN,SAAS,CAACU,eAAV,GAA4BpP,eAAe,CAACkP,qBAAD,CAA3C;MACD;;MAED,KAAKS,cAAL,CAAoBC,KAApB,EAA2Ba,eAA3B,EAA4C/C,aAA5C,EAA2DgB,SAA3D;IACD,CA3jBM;IA8jBP;IAEAwC,uBAAuB,EAAE,SAASA,uBAAT,CAAiCjP,IAAjC,EAAuC;MAC9D,IAAIkP,QAAQ,GAAG,KAAK5L,MAApB;MAAA,IACIzD,QAAQ,GAAGqP,QAAQ,CAACrP,QADxB;MAAA,IAEIoC,aAAa,GAAGiN,QAAQ,CAACjN,aAF7B;MAGA,IAAIoC,YAAY,GAAG,KAAKqB,KAAL,CAAWrB,YAA9B,CAJ8D,CAM9D;MACA;;MAEA,IAAIrE,IAAI,IAAI,CAACH,QAAT,IAAqB,CAACoC,aAAtB,IAAuCoC,YAA3C,EAAyD;QACvD,KAAKwH,oBAAL,CAA0B;UACxBxH,YAAY,EAAE,EADU;UAExBK,kBAAkB,EAAE;QAFI,CAA1B;MAID;;MACD,KAAKwG,YAAL,CAAkBlL,IAAlB,EAAwB,IAAxB;IACD,CAhlBM;IAilBPwF,mBAAmB,EAAE,SAASA,mBAAT,CAA6BsF,KAA7B,EAAoC;MACvD,IAAI7K,KAAK,GAAG6K,KAAK,CAACqE,MAAN,CAAalP,KAAzB;MACA,IAAImP,OAAO,GAAG,KAAK1J,KAAnB;MAAA,IACI+C,SAAS,GAAG2G,OAAO,CAAC3K,UADxB;MAAA,IAEI4B,aAAa,GAAG+I,OAAO,CAACnL,cAF5B;MAGA,IAAIoL,QAAQ,GAAG,KAAK/L,MAApB;MAAA,IACIb,cAAc,GAAG4M,QAAQ,CAAC5M,cAD9B;MAAA,IAEIV,kBAAkB,GAAGsN,QAAQ,CAACtN,kBAFlC;;MAIA,KAAK2J,MAAL,CAAY,oBAAZ,EAAkCzL,KAAlC;;MACA,KAAKyL,MAAL,CAAY,QAAZ,EAAsBzL,KAAtB;;MAEA,IAAIqP,KAAK,GAAG,KAAZ;;MAEA,IAAI,CAAC,KAAK1D,uBAAL,EAAL,EAAqC;QACnC0D,KAAK,GAAG,KAAKzD,oBAAL,CAA0B;UAChCxH,YAAY,EAAEpE;QADkB,CAA1B,CAAR;QAGA,KAAKiL,YAAL,CAAkB,IAAlB;MACD;;MAED,IAAIoE,KAAJ,EAAW;QACT;QACA,IAAIhF,gBAAgB,GAAGC,MAAM,CAACtK,KAAD,CAAN,CAAcuK,WAAd,EAAvB;QAEA,IAAIC,gBAAgB,GAAGhI,cAAvB;;QACA,IAAIA,cAAc,KAAK,KAAvB,EAA8B;UAC5BgI,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;YAC7C,OAAO,IAAP;UACD,CAFD;QAGD,CAJD,MAIO,IAAI,CAACA,gBAAL,EAAuB;UAC5BA,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,CAA1B,EAA6BC,IAA7B,EAAmC;YACpD,IAAIC,SAAS,GAAGL,MAAM,CAAC7L,YAAY,CAACiM,IAAD,CAAZ,CAAmB5I,kBAAnB,CAAD,CAAN,CAA+CyI,WAA/C,EAAhB;YACA,OAAOI,SAAS,CAACC,OAAV,CAAkBP,gBAAlB,MAAwC,CAAC,CAAhD;UACD,CAHD;QAID;;QAED,KAAK3E,QAAL,CAAc;UACZjB,kBAAkB,EAAEvG,aAAa,CAAC,KAAK6J,cAAN,EAAsBS,SAAtB,EAAiCxI,KAAjC,EAAwCwK,gBAAxC,EAA0DpE,aAA1D,EAAyE/H,UAAzE;QADrB,CAAd;MAGD;IACF,CA1nBM;IA2nBPmH,oBAAoB,EAAE,SAASA,oBAAT,CAA8BqF,KAA9B,EAAqC;MACzD,IAAIyE,OAAO,GAAG,KAAK7J,KAAnB;MAAA,IACIjF,WAAW,GAAG8O,OAAO,CAAClL,YAD1B;MAAA,IAEI2H,SAAS,GAAGuD,OAAO,CAAC1L,UAFxB;MAGA,IAAIkH,OAAO,GAAGD,KAAK,CAACC,OAApB;;MAGA,IAAInO,OAAO,CAAC4S,SAAR,KAAsBzE,OAAtB,IAAiC,KAAKzE,UAAL,EAAjC,IAAsD,CAAC7F,WAAvD,IAAsEuL,SAAS,CAAChN,MAApF,EAA4F;QAC1F,IAAIyQ,SAAS,GAAGzD,SAAS,CAACA,SAAS,CAAChN,MAAV,GAAmB,CAApB,CAAT,CAAgCiB,KAAhD;QACA,KAAKmF,wBAAL,CAA8B0F,KAA9B,EAAqC2E,SAArC;MACD;IACF,CAtoBM;IAuoBPC,sBAAsB,EAAE,SAASA,sBAAT,GAAkC;MACxD,IAAIC,MAAM,GAAG,IAAb;;MAEAnT,GAAG,CAAC,YAAY;QACdmT,MAAM,CAAC5J,eAAP;MACD,CAFE,CAAH;IAGD,CA7oBM;IA8oBP6J,WAAW,EAAE,SAASA,WAAT,CAAqBrJ,KAArB,EAA4B;MACvC,KAAKA,KAAL,GAAaA,KAAb;IACD,CAhpBM;;IAmpBP;AACJ;AACA;IACIsF,oBAAoB,EAAE,SAASA,oBAAT,CAA8BlI,KAA9B,EAAqC;MACzD,IAAIkM,QAAQ,GAAG,KAAf;MACA,IAAIlL,QAAQ,GAAG,EAAf;MACA,IAAIlF,KAAK,GAAGjB,cAAc,CAAC,IAAD,CAA1B;MACAsR,MAAM,CAAChR,IAAP,CAAY6E,KAAZ,EAAmBxE,OAAnB,CAA2B,UAAUI,IAAV,EAAgB;QACzC,IAAIA,IAAI,CAACwQ,KAAL,CAAW,CAAX,KAAiBtQ,KAArB,EAA4B;QAE5BoQ,QAAQ,GAAG,IAAX;QACAlL,QAAQ,CAACpF,IAAD,CAAR,GAAiBoE,KAAK,CAACpE,IAAD,CAAtB;MACD,CALD;;MAOA,IAAIsQ,QAAJ,EAAc;QACZ,KAAKlK,QAAL,CAAchB,QAAd;MACD;;MAED,OAAOkL,QAAP;IACD,CAtqBM;IAyqBP;IACA;IACA;IACA3E,YAAY,EAAE,SAASA,YAAT,CAAsBlL,IAAtB,EAA4B;MACxC,IAAIgQ,SAAS,GAAGjR,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;MACA,IAAI2C,qBAAqB,GAAG,KAAK4B,MAAL,CAAY5B,qBAAxC;;MAGA,IAAIA,qBAAqB,IAAIA,qBAAqB,CAAC1B,IAAD,EAAO;QAAEiQ,kBAAkB,EAAE,CAACjQ,IAAD,IAASgQ;MAA/B,CAAP,CAArB,KAA4E,KAAzG,EAAgH;QAC9G;MACD;;MAED,KAAKnE,oBAAL,CAA0B;QAAEjI,KAAK,EAAE5D;MAAT,CAA1B;IACD,CAtrBM;IAyrBP;IACAsG,UAAU,EAAE,SAASA,UAAT,GAAsB;MAChC,IAAI4J,QAAQ,GAAG,KAAK5M,MAApB;MAAA,IACIzD,QAAQ,GAAGqQ,QAAQ,CAACrQ,QADxB;MAAA,IAEIoC,aAAa,GAAGiO,QAAQ,CAACjO,aAF7B;MAIA,OAAO,CAAC,EAAEpC,QAAQ,IAAIoC,aAAd,CAAR;IACD,CAhsBM;IAisBPhE,cAAc,EAAE,SAASA,cAAT,GAA0B;MACxC,OAAOC,eAAe,CAAC,KAAKoF,MAAN,CAAtB;IACD,CAnsBM;IAssBP;IACA;IACA;IACA;IACAsI,uBAAuB,EAAE,SAASA,uBAAT,GAAmC;MAC1D,IAAInM,KAAK,GAAGjB,cAAc,CAAC,IAAD,CAA1B;MACA,IAAIgC,UAAU,GAAGf,KAAK,CAACe,UAAvB;MAEA,IAAI,iBAAiBf,KAArB,EAA4B,OAAO,IAAP;MAC5B,OAAO,gBAAgBA,KAAhB,IAAyBe,UAAU,KAAK,IAA/C;IACD,CAhtBM;IAitBPuF,eAAe,EAAE,SAASA,eAAT,GAA2B;MAC1C,IAAIoK,QAAQ,GAAG,KAAK1M,gBAAL,CAAsB2D,OAArC;;MACA,IAAI+I,QAAJ,EAAc;QACZA,QAAQ,CAACpK,eAAT;MACD;IACF,CAttBM;IAutBPqK,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;MACpD,IAAIC,MAAM,GAAG,IAAb,CADoD,CAGpD;MACA;;;MACA7T,GAAG,CAAC,YAAY;QACdA,GAAG,CAAC6T,MAAM,CAACtK,eAAR,CAAH;MACD,CAFE,CAAH;IAGD,CA/tBM;;IAkuBP;AACJ;AACA;AACA;IACI4F,aAAa,EAAE,SAASA,aAAT,CAAuBrC,aAAvB,EAAsC0C,SAAtC,EAAiD;MAC9D,IAAIS,SAAS,GAAG1N,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;MACA,IAAIuR,OAAO,GAAG,KAAK5K,KAAnB;MAAA,IACIW,aAAa,GAAGiK,OAAO,CAACrM,cAD5B;MAAA,IAEIxD,WAAW,GAAG6P,OAAO,CAACjM,YAF1B;MAAA,IAGIkM,qBAAqB,GAAGD,OAAO,CAACtM,kBAHpC;MAKA,IAAIvE,KAAK,GAAGjB,cAAc,CAAC,IAAD,CAA1B;MACA,IAAIoC,QAAQ,GAAGnB,KAAK,CAACmB,QAArB;MAAA,IACIqB,aAAa,GAAGxC,KAAK,CAACwC,aAD1B;MAAA,IAEIC,iBAAiB,GAAGzC,KAAK,CAACyC,iBAF9B;MAIA,IAAItB,QAAJ,EAAc,OAZgD,CAc9D;;MACA,IAAI4P,KAAK,GAAGlU,QAAQ,CAAC;QACnB;QACAmU,QAAQ,EAAEF,qBAAqB,CAACrG,GAAtB,CAA0B,UAAUwG,MAAV,EAAkB;UACpD,IAAI7G,KAAK,GAAG6G,MAAM,CAAC7G,KAAnB;UAAA,IACI5J,KAAK,GAAGyQ,MAAM,CAACzQ,KADnB;UAEA,OAAO;YAAE4J,KAAK,EAAEA,KAAT;YAAgB5J,KAAK,EAAEA;UAAvB,CAAP;QACD,CAJS;MAFS,CAAD,EAOjBwM,SAPiB,CAApB,CAf8D,CAwB9D;;;MACA,IAAIrG,iBAAiB,GAAG3I,mBAAmB,CAACuO,SAAD,EAAYvM,KAAZ,EAAmB4G,aAAnB,CAA3C;;MAEA,IAAI,EAAE,WAAW5G,KAAb,CAAJ,EAAyB;QACvB,IAAIkF,QAAQ,GAAG;UACbZ,cAAc,EAAEuF,aADH;UAEbzF,UAAU,EAAEmI,SAFC;UAGbhI,kBAAkB,EAAEoC;QAHP,CAAf;;QAMA,IAAI3F,WAAW,IAAIwB,aAAf,IAAgC,CAACC,iBAArC,EAAwD;UACtDyC,QAAQ,CAACb,sBAAT,GAAkChG,kBAAkB,CAACkO,SAAD,EAAY3F,aAAZ,CAApD;QACD;;QAED,KAAKV,QAAL,CAAchB,QAAd;MACD,CAvC6D,CAyC9D;;;MACA,IAAI/F,YAAY,CAAC,IAAD,CAAZ,CAAmB+R,MAAvB,EAA+B;QAC7B,IAAIC,gBAAgB,GAAG,KAAK,CAA5B,CAD6B,CAG7B;;QACA,IAAI,KAAKtK,UAAL,EAAJ,EAAuB;UACrBsK,gBAAgB,GAAG,GAAGlH,MAAH,CAAUrN,kBAAkB,CAACiN,aAAD,CAA5B,EAA6CjN,kBAAkB,CAAC+J,iBAAD,CAA/D,CAAnB;QACD,CAFD,MAEO;UACLwK,gBAAgB,GAAGxK,iBAAiB,CAAC2J,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAnB;QACD;;QAED,IAAIc,SAAS,GAAG,IAAhB;QACA,IAAIC,WAAW,GAAG,KAAK,CAAvB;;QAEA,IAAI,KAAK7S,cAAL,EAAJ,EAA2B;UACzB6S,WAAW,GAAGF,gBAAgB,CAAC1G,GAAjB,CAAqB,UAAU6G,MAAV,EAAkB;YACnD,IAAIlH,KAAK,GAAGkH,MAAM,CAAClH,KAAnB;YAAA,IACI5J,KAAK,GAAG8Q,MAAM,CAAC9Q,KADnB;YAEA,OAAO;cAAE4J,KAAK,EAAEA,KAAT;cAAgB5J,KAAK,EAAEA;YAAvB,CAAP;UACD,CAJa,CAAd;QAKD,CAND,MAMO;UACL4Q,SAAS,GAAG,EAAZ;UACAC,WAAW,GAAGF,gBAAgB,CAAC1G,GAAjB,CAAqB,UAAU8G,MAAV,EAAkB;YACnD,IAAInH,KAAK,GAAGmH,MAAM,CAACnH,KAAnB;YAAA,IACI5J,KAAK,GAAG+Q,MAAM,CAAC/Q,KADnB;YAGA4Q,SAAS,CAAC9G,IAAV,CAAeF,KAAf;YACA,OAAO5J,KAAP;UACD,CANa,CAAd;QAOD;;QAED,IAAI,CAAC,KAAKqG,UAAL,EAAL,EAAwB;UACtBwK,WAAW,GAAGA,WAAW,CAAC,CAAD,CAAzB;QACD;;QACD,KAAKpF,MAAL,CAAY,QAAZ,EAAsBoF,WAAtB,EAAmCD,SAAnC,EAA8CL,KAA9C;MACD;IACF,CAnzBM;IAozBP7I,KAAK,EAAE,SAASA,KAAT,GAAiB;MACtB,KAAKnE,WAAL,CAAiB4D,OAAjB,CAAyBO,KAAzB;IACD,CAtzBM;IAuzBPsJ,IAAI,EAAE,SAASA,IAAT,GAAgB;MACpB,KAAKzN,WAAL,CAAiB4D,OAAjB,CAAyB6J,IAAzB;IACD;EAzzBM,CAlNE;EA8gCX;EAEAC,MAAM,EAAE,SAASA,MAAT,GAAkB;IACxB,IAAInJ,CAAC,GAAGhJ,SAAS,CAAC,CAAD,CAAjB;IACA,IAAIoS,OAAO,GAAG,KAAKzL,KAAnB;IAAA,IACIsG,SAAS,GAAGmF,OAAO,CAACtN,UADxB;IAAA,IAEIyF,aAAa,GAAG6H,OAAO,CAACpN,cAF5B;IAAA,IAGIqC,iBAAiB,GAAG+K,OAAO,CAACnN,kBAHhC;IAAA,IAIIoN,qBAAqB,GAAGD,OAAO,CAACrN,sBAJpC;IAAA,IAKIuC,aAAa,GAAG8K,OAAO,CAAClN,cAL5B;IAAA,IAMIoF,WAAW,GAAG8H,OAAO,CAAC/M,YAN1B;IAAA,IAOI3D,WAAW,GAAG0Q,OAAO,CAAC9M,YAP1B;IAAA,IAQIrE,IAAI,GAAGmR,OAAO,CAACvN,KARnB;IAAA,IASIyN,OAAO,GAAGF,OAAO,CAAC3M,QATtB;IAAA,IAUIiE,SAAS,GAAG0I,OAAO,CAAC1M,UAVxB;IAAA,IAWI6M,iBAAiB,GAAGH,OAAO,CAACzM,kBAXhC;IAaA,IAAIjF,KAAK,GAAGjB,cAAc,CAAC,IAAD,CAA1B;IACA,IAAIkB,SAAS,GAAGD,KAAK,CAACC,SAAtB;IAAA,IACI6C,gBAAgB,GAAG9C,KAAK,CAAC8C,gBAD7B;IAGA,IAAI+D,UAAU,GAAG,KAAKA,UAAL,EAAjB;IAEA,IAAIiL,SAAS,GAAG;MACd9R,KAAK,EAAEnD,QAAQ,CAAC,EAAD,EAAKmD,KAAL,EAAY;QACzB6G,UAAU,EAAEA,UADa;QAEzB0F,SAAS,EAAEA,SAFc;QAGzBoF,qBAAqB,EAAEA,qBAHE;QAIzBhL,iBAAiB,EAAE,GAAGsD,MAAH,CAAUrN,kBAAkB,CAACiN,aAAD,CAA5B,EAA6CjN,kBAAkB,CAAC+J,iBAAD,CAA/D,CAJM;QAKzBC,aAAa,EAAEA,aALU;QAMzBgD,WAAW,EAAEA,WANY;QAOzB5I,WAAW,EAAEA,WAPY;QAQzB6J,gBAAgB,EAAE,CAAC7J,WAAW,IAAI,EAAhB,EAAoB+J,WAApB,EARO;QAQ4B;QACrDxK,IAAI,EAAEA,IATmB;QAUzBqR,OAAO,EAAEA,OAVgB;QAWzBG,iBAAiB,EAAE9R,SAAS,GAAG,WAXN;QAYzBgE,MAAM,EAAE,KAAKA;MAZY,CAAZ,CADD;MAed+N,EAAE,EAAEnV,QAAQ,CAAC,EAAD,EAAKsC,YAAY,CAAC,IAAD,CAAjB,EAAyB;QACnC8S,oBAAoB,EAAE,KAAKhC;MADQ,CAAzB,CAfE;MAkBdiC,WAAW,EAAE,KAAKC;IAlBJ,CAAhB;IAoBA,IAAIC,UAAU,GAAGpT,UAAU,CAAC8S,SAAD,EAAY;MACrC9R,KAAK,EAAE;QACLgJ,SAAS,EAAEA,SADN;QAEL6I,iBAAiB,EAAEA,iBAFd;QAGL;QACA/O,gBAAgB,EAAEA,gBAJb;QAKLa,eAAe,EAAE0O,MAAM;MALlB,CAD8B;MAQrCL,EAAE,EAAE;QACFM,YAAY,EAAE,KAAK3B;MADjB,CARiC;MAWrC4B,UAAU,EAAE,CAAC;QACXzS,IAAI,EAAE,SADK;QAEXU,KAAK,EAAE,KAAK2P;MAFD,CAAD;IAXyB,CAAZ,CAA3B;IAiBA,IAAIqC,KAAK,GAAG3L,UAAU,GAAGrJ,aAAH,GAAmBD,WAAzC;IACA,IAAIkV,MAAM,GAAGnK,CAAC,CAACkK,KAAD,EAAQJ,UAAR,CAAd;IAEA,IAAIM,QAAQ,GAAG7L,UAAU,GAAGvJ,gBAAH,GAAsBD,cAA/C;IACA,IAAIsV,SAAS,GAAGrK,CAAC,CAACoK,QAAD,EAAW/V,cAAc,CAAC,CAACmV,SAAD,EAAY;MACrDS,UAAU,EAAE,CAAC;QACXzS,IAAI,EAAE,SADK;QAEXU,KAAK,EAAE,KAAKuD;MAFD,CAAD;IADyC,CAAZ,CAAD,CAAzB,CAAjB;IAMA,IAAI6O,kBAAkB,GAAG5T,UAAU,CAAC8S,SAAD,EAAY;MAC7C9R,KAAK,EAAE;QACL6S,YAAY,EAAEJ,MADT;QAELxQ,qBAAqB,EAAE,KAAKuN;MAFvB,CADsC;MAK7C+C,UAAU,EAAE,CAAC;QACXzS,IAAI,EAAE,SADK;QAEXU,KAAK,EAAE,KAAKwD;MAFD,CAAD;IALiC,CAAZ,CAAnC;IAUA,OAAOsE,CAAC,CACNlL,aADM,EAENwV,kBAFM,EAGN,CAACD,SAAD,CAHM,CAAR;EAKD;AAnmCU,CAAb;AAsmCA9S,MAAM,CAACiT,QAAP,GAAkBjU,UAAlB;AACAgB,MAAM,CAACpC,QAAP,GAAkBA,QAAlB;AACAoC,MAAM,CAACnC,WAAP,GAAqBA,WAArB;AACAmC,MAAM,CAAClC,UAAP,GAAoBA,UAApB,C,CAEA;;AACAkC,MAAM,CAACC,IAAP,GAAc,YAAd;AAEA,eAAeD,MAAf"},"metadata":{},"sourceType":"module"}