{"ast":null,"code":"import \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\nimport warning from 'warning';\nimport omit from 'omit.js';\nimport { convertDataToTree as vcConvertDataToTree, convertTreeToEntities as vcConvertTreeToEntities, conductCheck as rcConductCheck } from '../../vc-tree/src/util';\nimport { hasClass } from '../../vc-util/Dom/class';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nimport { getSlots, getPropsData, isEmptyElement } from '../../_util/props-util';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n\n    current = current.parentNode;\n  }\n\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n}\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _extends({}, entity, {\n      fields: entity.pos.split('-')\n    });\n\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return prefix + '_' + ariaId;\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _extends({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\n\nexport function getFilterTree(h, treeNodes, searchValue, filterFunc, valueEntities, Component) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node || isEmptyElement(node)) return null;\n    var match = false;\n\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = getSlots(node)['default'];\n    children = ((typeof children === 'function' ? children() : children) || []).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return h(Component, _mergeJSXProps([node.data, {\n        key: valueEntities[getPropsData(node).value].key\n      }]), [children]);\n    }\n\n    return null;\n  }\n\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity) {\n    var props = getPropsData(entity.node);\n\n    if (Object.keys(props).length) {\n      return props[treeNodeLabelProp];\n    }\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var node = _ref4.node;\n        var value = getPropsData(node).value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var node = _ref5.node,\n            children = _ref5.children;\n        var value = getPropsData(node).value;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      value = props.value,\n      cls = props['class'],\n      style = props.style,\n      _props$on = props.on,\n      on = _props$on === undefined ? {} : _props$on;\n  var key = props.key;\n\n  if (!key && (key === undefined || key === null)) {\n    key = value;\n  }\n\n  var p = {\n    props: omit(props, ['on', 'key', 'class', 'className', 'style']),\n    on: on,\n    'class': cls || props.className,\n    style: style,\n    key: key\n  }; // Warning user not to use deprecated label prop.\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    p.props.title = label;\n  }\n\n  return p;\n}\n\nexport function convertDataToTree(h, treeData) {\n  return vcConvertDataToTree(h, treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _extends({}, wrapper, {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = getPropsData(entity.node).value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n\n  if (currentEntity) {\n    warning(false, 'Conflict! value of node \\'' + entity.key + '\\' (' + value + ') has already used by node \\'' + currentEntity.key + '\\'.');\n  }\n\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return vcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;","map":{"version":3,"names":["_typeof","_mergeJSXProps","_extends","warning","omit","convertDataToTree","vcConvertDataToTree","convertTreeToEntities","vcConvertTreeToEntities","conductCheck","rcConductCheck","hasClass","SHOW_CHILD","SHOW_PARENT","getSlots","getPropsData","isEmptyElement","warnDeprecatedLabel","findPopupContainer","node","prefixClass","current","parentNode","toTitle","title","toArray","data","undefined","Array","isArray","createRef","func","setRef","UNSELECTABLE_STYLE","userSelect","WebkitUserSelect","UNSELECTABLE_ATTRIBUTE","unselectable","flatToHierarchy","positionList","length","entrances","posMap","parsedList","slice","map","entity","clone","fields","pos","split","children","forEach","sort","a","b","parentPos","join","parentEntity","push","key","Object","keys","ariaId","resetAriaId","generateAriaId","prefix","isLabelInValue","props","treeCheckable","treeCheckStrictly","labelInValue","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","parentKey","parent","isPosRelated","pos1","pos2","fields1","fields2","minLen","Math","min","i","cleanEntity","_ref2","instance","getFilterTree","h","treeNodes","searchValue","filterFunc","valueEntities","Component","mapFilteredNodeToData","match","filter","n","value","formatInternalValue","valueList","val","label","getLabel","wrappedValue","treeNodeLabelProp","formatSelectorValue","showCheckedStrategy","values","hierarchyList","_ref3","_ref4","targetValueList","traverse","_ref5","processProps","cls","style","_props$on","on","p","className","initWrapper","wrapper","processEntity","currentEntity","getHalfCheckedKeys","_ref6","_ref7","parentValue"],"sources":["/Users/andreidev/domains/hakaton_cskz_front/node_modules/ant-design-vue/es/vc-tree-select/src/util.js"],"sourcesContent":["import _typeof from 'babel-runtime/helpers/typeof';\nimport _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\nimport warning from 'warning';\nimport omit from 'omit.js';\nimport { convertDataToTree as vcConvertDataToTree, convertTreeToEntities as vcConvertTreeToEntities, conductCheck as rcConductCheck } from '../../vc-tree/src/util';\nimport { hasClass } from '../../vc-util/Dom/class';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nimport { getSlots, getPropsData, isEmptyElement } from '../../_util/props-util';\n\nvar warnDeprecatedLabel = false;\n\n// =================== DOM =====================\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n    current = current.parentNode;\n  }\n\n  return null;\n}\n\n// =================== MISC ====================\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n  return null;\n}\n\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n\n  return Array.isArray(data) ? data : [data];\n}\n\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n  return func;\n}\n\n// =============== Legacy ===============\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\n\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {};\n\n  // Prepare the position map\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _extends({}, entity, {\n      fields: entity.pos.split('-')\n    });\n    delete clone.children;\n    return clone;\n  });\n\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  });\n\n  // Create the hierarchy\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    }\n\n    // Some time position list provide `key`, we don't need it\n    delete entity.key;\n    delete entity.fields;\n  });\n\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n}\n\n// =============== Accessibility ===============\nvar ariaId = 0;\n\nexport function resetAriaId() {\n  ariaId = 0;\n}\n\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return prefix + '_' + ariaId;\n}\n\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n  return labelInValue || false;\n}\n\n// =================== Tree ====================\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n\n  var keyNodes = {};\n  var rootNodeList = [];\n\n  // Fill in the map\n  var nodeList = treeData.map(function (node) {\n    var clone = _extends({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  });\n\n  // Connect tree\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey];\n\n    // Fill parent\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    }\n\n    // Fill root tree node\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n\n  return rootNodeList;\n}\n\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n\n  var minLen = Math.min(fields1.length, fields2.length);\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\nexport function getFilterTree(h, treeNodes, searchValue, filterFunc, valueEntities, Component) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node || isEmptyElement(node)) return null;\n\n    var match = false;\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n    var children = getSlots(node)['default'];\n    children = ((typeof children === 'function' ? children() : children) || []).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n    if (children.length || match) {\n      return h(\n        Component,\n        _mergeJSXProps([node.data, { key: valueEntities[getPropsData(node).value].key }]),\n        [children]\n      );\n    }\n\n    return null;\n  }\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n}\n\n// =================== Value ===================\n/**\n * Convert value to array format to make logic simplify.\n */\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value);\n\n  // Parse label in value\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\n\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity) {\n    var props = getPropsData(entity.node);\n    if (Object.keys(props).length) {\n      return props[treeNodeLabelProp];\n    }\n  }\n\n  // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n  return wrappedValue.value;\n}\n\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy;\n\n  // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var node = _ref4.node;\n\n        var value = getPropsData(node).value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = [];\n\n      // Find the leaf children\n      var traverse = function traverse(_ref5) {\n        var node = _ref5.node,\n            children = _ref5.children;\n\n        var value = getPropsData(node).value;\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      value = props.value,\n      cls = props['class'],\n      style = props.style,\n      _props$on = props.on,\n      on = _props$on === undefined ? {} : _props$on;\n\n  var key = props.key;\n  if (!key && (key === undefined || key === null)) {\n    key = value;\n  }\n  var p = {\n    props: omit(props, ['on', 'key', 'class', 'className', 'style']),\n    on: on,\n    'class': cls || props.className,\n    style: style,\n    key: key\n  };\n  // Warning user not to use deprecated label prop.\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    p.props.title = label;\n  }\n\n  return p;\n}\n\nexport function convertDataToTree(h, treeData) {\n  return vcConvertDataToTree(h, treeData, { processProps: processProps });\n}\n\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\nfunction initWrapper(wrapper) {\n  return _extends({}, wrapper, {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = getPropsData(entity.node).value;\n  entity.value = value;\n\n  // This should be empty, or will get error message.\n  var currentEntity = wrapper.valueEntities[value];\n  if (currentEntity) {\n    warning(false, 'Conflict! value of node \\'' + entity.key + '\\' (' + value + ') has already used by node \\'' + currentEntity.key + '\\'.');\n  }\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return vcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {};\n\n  // Fill checked keys\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n\n    values[value] = false;\n  });\n\n  // Fill half checked keys\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n\n      current = current.parent;\n    }\n  });\n\n  // Get half keys\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\n\nexport var conductCheck = rcConductCheck;"],"mappings":"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"},"metadata":{},"sourceType":"module"}