{"ast":null,"code":"import \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { initDefaultProps, getListeners } from '../_util/props-util';\nimport Statistic, { StatisticProps } from './Statistic';\nimport { formatCountdown as _formatCountdown } from './utils';\nvar REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return interopDefault(moment)(value).valueOf();\n}\n\nexport default {\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(StatisticProps, {\n    format: 'HH:mm:ss'\n  }),\n  created: function created() {\n    this.countdownId = undefined;\n  },\n  mounted: function mounted() {\n    this.syncTimer();\n  },\n  updated: function updated() {\n    this.syncTimer();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopTimer();\n  },\n  methods: {\n    syncTimer: function syncTimer() {\n      var value = this.$props.value;\n      var timestamp = getTime(value);\n\n      if (timestamp >= Date.now()) {\n        this.startTimer();\n      } else {\n        this.stopTimer();\n      }\n    },\n    startTimer: function startTimer() {\n      var _this = this;\n\n      if (this.countdownId) return;\n      this.countdownId = window.setInterval(function () {\n        _this.$refs.statistic.$forceUpdate();\n\n        _this.syncTimer();\n      }, REFRESH_INTERVAL);\n    },\n    stopTimer: function stopTimer() {\n      var value = this.$props.value;\n\n      if (this.countdownId) {\n        clearInterval(this.countdownId);\n        this.countdownId = undefined;\n        var timestamp = getTime(value);\n\n        if (timestamp < Date.now()) {\n          this.$emit('finish');\n        }\n      }\n    },\n    formatCountdown: function formatCountdown(_ref) {\n      var value = _ref.value,\n          config = _ref.config;\n      var format = this.$props.format;\n      return _formatCountdown(value, _extends({}, config, {\n        format: format\n      }));\n    },\n    valueRenderHtml: function valueRenderHtml(node) {\n      return node;\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    return h(Statistic, _mergeJSXProps([{\n      ref: 'statistic'\n    }, {\n      props: _extends({}, this.$props, {\n        valueRender: this.valueRenderHtml,\n        formatter: this.formatCountdown\n      }),\n      on: getListeners(this)\n    }]));\n  }\n};","map":{"version":3,"names":["_mergeJSXProps","_extends","moment","interopDefault","initDefaultProps","getListeners","Statistic","StatisticProps","formatCountdown","_formatCountdown","REFRESH_INTERVAL","getTime","value","valueOf","name","props","format","created","countdownId","undefined","mounted","syncTimer","updated","beforeDestroy","stopTimer","methods","$props","timestamp","Date","now","startTimer","_this","window","setInterval","$refs","statistic","$forceUpdate","clearInterval","$emit","_ref","config","valueRenderHtml","node","render","h","arguments","ref","valueRender","formatter","on"],"sources":["/Users/andreidev/domains/hakaton_cskz_front/node_modules/ant-design-vue/es/statistic/Countdown.js"],"sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { initDefaultProps, getListeners } from '../_util/props-util';\nimport Statistic, { StatisticProps } from './Statistic';\nimport { formatCountdown as _formatCountdown } from './utils';\n\nvar REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return interopDefault(moment)(value).valueOf();\n}\n\nexport default {\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(StatisticProps, {\n    format: 'HH:mm:ss'\n  }),\n\n  created: function created() {\n    this.countdownId = undefined;\n  },\n  mounted: function mounted() {\n    this.syncTimer();\n  },\n  updated: function updated() {\n    this.syncTimer();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopTimer();\n  },\n\n\n  methods: {\n    syncTimer: function syncTimer() {\n      var value = this.$props.value;\n\n      var timestamp = getTime(value);\n      if (timestamp >= Date.now()) {\n        this.startTimer();\n      } else {\n        this.stopTimer();\n      }\n    },\n    startTimer: function startTimer() {\n      var _this = this;\n\n      if (this.countdownId) return;\n      this.countdownId = window.setInterval(function () {\n        _this.$refs.statistic.$forceUpdate();\n        _this.syncTimer();\n      }, REFRESH_INTERVAL);\n    },\n    stopTimer: function stopTimer() {\n      var value = this.$props.value;\n\n      if (this.countdownId) {\n        clearInterval(this.countdownId);\n        this.countdownId = undefined;\n\n        var timestamp = getTime(value);\n        if (timestamp < Date.now()) {\n          this.$emit('finish');\n        }\n      }\n    },\n    formatCountdown: function formatCountdown(_ref) {\n      var value = _ref.value,\n          config = _ref.config;\n      var format = this.$props.format;\n\n      return _formatCountdown(value, _extends({}, config, { format: format }));\n    },\n\n\n    valueRenderHtml: function valueRenderHtml(node) {\n      return node;\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n\n    return h(Statistic, _mergeJSXProps([{\n      ref: 'statistic'\n    }, {\n      props: _extends({}, this.$props, {\n        valueRender: this.valueRenderHtml,\n        formatter: this.formatCountdown\n      }),\n      on: getListeners(this)\n    }]));\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}