{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport padEnd from 'lodash/padEnd';\nexport default {\n  name: 'AStatisticNumber',\n  functional: true,\n  render: function render(h, context) {\n    var _context$props = context.props,\n        value = _context$props.value,\n        formatter = _context$props.formatter,\n        precision = _context$props.precision,\n        decimalSeparator = _context$props.decimalSeparator,\n        _context$props$groupS = _context$props.groupSeparator,\n        groupSeparator = _context$props$groupS === undefined ? '' : _context$props$groupS,\n        prefixCls = _context$props.prefixCls;\n    var valueNode = void 0;\n\n    if (typeof formatter === 'function') {\n      // Customize formatter\n      valueNode = formatter({\n        value: value,\n        h: h\n      });\n    } else {\n      // Internal formatter\n      var val = String(value);\n      var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n      if (!cells) {\n        valueNode = val;\n      } else {\n        var negative = cells[1];\n\n        var _int = cells[2] || '0';\n\n        var decimal = cells[4] || '';\n        _int = _int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n        if (typeof precision === 'number') {\n          decimal = padEnd(decimal, precision, '0').slice(0, precision);\n        }\n\n        if (decimal) {\n          decimal = '' + decimalSeparator + decimal;\n        }\n\n        valueNode = [h('span', {\n          key: 'int',\n          'class': prefixCls + '-content-value-int'\n        }, [negative, _int]), decimal && h('span', {\n          key: 'decimal',\n          'class': prefixCls + '-content-value-decimal'\n        }, [decimal])];\n      }\n    }\n\n    return h('span', {\n      'class': prefixCls + '-content-value'\n    }, [valueNode]);\n  }\n};","map":{"version":3,"names":["padEnd","name","functional","render","h","context","_context$props","props","value","formatter","precision","decimalSeparator","_context$props$groupS","groupSeparator","undefined","prefixCls","valueNode","val","String","cells","match","negative","int","decimal","replace","slice","key"],"sources":["/Users/andreidev/domains/hakaton_cskz_front/node_modules/ant-design-vue/es/statistic/Number.js"],"sourcesContent":["import padEnd from 'lodash/padEnd';\n\nexport default {\n  name: 'AStatisticNumber',\n  functional: true,\n  render: function render(h, context) {\n    var _context$props = context.props,\n        value = _context$props.value,\n        formatter = _context$props.formatter,\n        precision = _context$props.precision,\n        decimalSeparator = _context$props.decimalSeparator,\n        _context$props$groupS = _context$props.groupSeparator,\n        groupSeparator = _context$props$groupS === undefined ? '' : _context$props$groupS,\n        prefixCls = _context$props.prefixCls;\n\n    var valueNode = void 0;\n\n    if (typeof formatter === 'function') {\n      // Customize formatter\n      valueNode = formatter({ value: value, h: h });\n    } else {\n      // Internal formatter\n      var val = String(value);\n      var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n      // Process if illegal number\n      if (!cells) {\n        valueNode = val;\n      } else {\n        var negative = cells[1];\n        var int = cells[2] || '0';\n        var decimal = cells[4] || '';\n\n        int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n        if (typeof precision === 'number') {\n          decimal = padEnd(decimal, precision, '0').slice(0, precision);\n        }\n\n        if (decimal) {\n          decimal = '' + decimalSeparator + decimal;\n        }\n\n        valueNode = [h(\n          'span',\n          { key: 'int', 'class': prefixCls + '-content-value-int' },\n          [negative, int]\n        ), decimal && h(\n          'span',\n          { key: 'decimal', 'class': prefixCls + '-content-value-decimal' },\n          [decimal]\n        )];\n      }\n    }\n\n    return h(\n      'span',\n      { 'class': prefixCls + '-content-value' },\n      [valueNode]\n    );\n  }\n};"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,eAAnB;AAEA,eAAe;EACbC,IAAI,EAAE,kBADO;EAEbC,UAAU,EAAE,IAFC;EAGbC,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmBC,OAAnB,EAA4B;IAClC,IAAIC,cAAc,GAAGD,OAAO,CAACE,KAA7B;IAAA,IACIC,KAAK,GAAGF,cAAc,CAACE,KAD3B;IAAA,IAEIC,SAAS,GAAGH,cAAc,CAACG,SAF/B;IAAA,IAGIC,SAAS,GAAGJ,cAAc,CAACI,SAH/B;IAAA,IAIIC,gBAAgB,GAAGL,cAAc,CAACK,gBAJtC;IAAA,IAKIC,qBAAqB,GAAGN,cAAc,CAACO,cAL3C;IAAA,IAMIA,cAAc,GAAGD,qBAAqB,KAAKE,SAA1B,GAAsC,EAAtC,GAA2CF,qBANhE;IAAA,IAOIG,SAAS,GAAGT,cAAc,CAACS,SAP/B;IASA,IAAIC,SAAS,GAAG,KAAK,CAArB;;IAEA,IAAI,OAAOP,SAAP,KAAqB,UAAzB,EAAqC;MACnC;MACAO,SAAS,GAAGP,SAAS,CAAC;QAAED,KAAK,EAAEA,KAAT;QAAgBJ,CAAC,EAAEA;MAAnB,CAAD,CAArB;IACD,CAHD,MAGO;MACL;MACA,IAAIa,GAAG,GAAGC,MAAM,CAACV,KAAD,CAAhB;MACA,IAAIW,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,uBAAV,CAAZ,CAHK,CAIL;;MACA,IAAI,CAACD,KAAL,EAAY;QACVH,SAAS,GAAGC,GAAZ;MACD,CAFD,MAEO;QACL,IAAII,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAApB;;QACA,IAAIG,IAAG,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;;QACA,IAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;QAEAG,IAAG,GAAGA,IAAG,CAACE,OAAJ,CAAY,uBAAZ,EAAqCX,cAArC,CAAN;;QACA,IAAI,OAAOH,SAAP,KAAqB,QAAzB,EAAmC;UACjCa,OAAO,GAAGvB,MAAM,CAACuB,OAAD,EAAUb,SAAV,EAAqB,GAArB,CAAN,CAAgCe,KAAhC,CAAsC,CAAtC,EAAyCf,SAAzC,CAAV;QACD;;QAED,IAAIa,OAAJ,EAAa;UACXA,OAAO,GAAG,KAAKZ,gBAAL,GAAwBY,OAAlC;QACD;;QAEDP,SAAS,GAAG,CAACZ,CAAC,CACZ,MADY,EAEZ;UAAEsB,GAAG,EAAE,KAAP;UAAc,SAASX,SAAS,GAAG;QAAnC,CAFY,EAGZ,CAACM,QAAD,EAAWC,IAAX,CAHY,CAAF,EAITC,OAAO,IAAInB,CAAC,CACb,MADa,EAEb;UAAEsB,GAAG,EAAE,SAAP;UAAkB,SAASX,SAAS,GAAG;QAAvC,CAFa,EAGb,CAACQ,OAAD,CAHa,CAJH,CAAZ;MASD;IACF;;IAED,OAAOnB,CAAC,CACN,MADM,EAEN;MAAE,SAASW,SAAS,GAAG;IAAvB,CAFM,EAGN,CAACC,SAAD,CAHM,CAAR;EAKD;AAxDY,CAAf"},"metadata":{},"sourceType":"module"}